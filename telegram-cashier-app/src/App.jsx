import React, { useState, useEffect } from 'react';
import { Camera, MapPin, Clock, Calculator, Send, RefreshCw, Home, Package, FileText, RotateCcw, Plus } from 'lucide-react';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';

const TelegramWebApp = () => {
  const [currentForm, setCurrentForm] = useState('menu');
  const [isLoading, setIsLoading] = useState(false);

  const locations = [
    '–ì–∞–≥–∞—Ä–∏–Ω–∞ 48/1',
    '–ê–±–¥—É–ª—Ö–∞–∫–∏–º–∞ –ò—Å–º–∞–∏–ª–æ–≤–∞ 51',
    '–ì–∞–π–¥–∞—Ä–∞ –ì–∞–¥–∂–∏–µ–≤–∞ 7–ë'
  ];

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ –ú–°–ö
  const getCurrentMSKTime = () => {
    const now = new Date();
    const mskTime = new Date(now.getTime() + (3 * 60 * 60 * 1000));
    return mskTime.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  const getCurrentDate = () => {
    const now = new Date();
    const mskTime = new Date(now.getTime() + (3 * 60 * 60 * 1000));
    return mskTime.toISOString().split('T')[0];
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.MainButton.hide();
    }
  }, []);

  // API Service
  const apiService = {
    async createShiftReport(formData) {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å–º–µ–Ω—ã...');
      const response = await fetch(`${API_BASE_URL}/shift-reports/create`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData}`);
      }

      return await response.json();
    },

    async createInventoryReport(formData) {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏...');
      const response = await fetch(`${API_BASE_URL}/daily_inventory/create`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData}`);
      }

      return await response.json();
    },

    async createReceivingReport(formData) {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
      const response = await fetch(`${API_BASE_URL}/report-on-goods/create`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData}`);
      }

      return await response.json();
    },

    async createWriteOffReport(formData) {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');
      const response = await fetch(`${API_BASE_URL}/writeoff-transfer/create`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorData}`);
      }

      return await response.json();
    }
  };

  // Main Menu Component
  const MainMenu = () => (
    <div className="min-h-screen bg-gray-900 text-white p-4">
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-blue-400 mb-2">üìä –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∫–∞—Å—Å–∏—Ä–∞</h1>
          <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞</p>
        </div>

        <div className="space-y-4">
          <button
            onClick={() => setCurrentForm('cashier')}
            className="w-full p-4 bg-gradient-to-r from-green-600 to-green-700 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="text-2xl">üí∞</div>
                <div className="text-left">
                  <h3 className="font-semibold text-lg">–Ø –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É, —Å–¥–∞—Ç—å –æ—Ç—á—ë—Ç</h3>
                  <p className="text-green-200 text-sm">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã</p>
                </div>
              </div>
              <div className="text-green-200">‚Üí</div>
            </div>
          </button>

          <button
            onClick={() => setCurrentForm('inventory')}
            className="w-full p-4 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="text-2xl">üì¶</div>
                <div className="text-left">
                  <h3 className="font-semibold text-lg">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</h3>
                  <p className="text-blue-200 text-sm">–ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤</p>
                </div>
              </div>
              <div className="text-blue-200">‚Üí</div>
            </div>
          </button>

          <button
            onClick={() => setCurrentForm('receiving')}
            className="w-full p-4 bg-gradient-to-r from-purple-600 to-purple-700 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="text-2xl">üì•</div>
                <div className="text-left">
                  <h3 className="font-semibold text-lg">–û—Ç—á—ë—Ç –ø—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–∞</h3>
                  <p className="text-purple-200 text-sm">–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</p>
                </div>
              </div>
              <div className="text-purple-200">‚Üí</div>
            </div>
          </button>

          <button
            onClick={() => setCurrentForm('writeoff')}
            className="w-full p-4 bg-gradient-to-r from-red-600 to-red-700 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="text-2xl">üìã</div>
                <div className="text-left">
                  <h3 className="font-semibold text-lg">–ê–∫—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</h3>
                  <p className="text-red-200 text-sm">–î–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</p>
                </div>
              </div>
              <div className="text-red-200">‚Üí</div>
            </div>
          </button>
        </div>
      </div>
    </div>
  );

  // Cashier Report Form
  const CashierReportForm = () => {
    const [formData, setFormData] = useState({
      location: '',
      shift: '',
      date: getCurrentMSKTime(),
      cashierName: '',
      incomes: Array(5).fill({ amount: '', comment: '' }),
      expenses: Array(10).fill({ name: '', amount: '' }),
      iikoData: {
        totalRevenue: '',
        returns: '',
        acquiring: '',
        qrCode: '',
        onlineApp: '',
        yandexEda: ''
      },
      photo: null
    });

    const handleInputChange = (field, value, index = null, subfield = null) => {
      setFormData(prev => {
        if (index !== null && subfield) {
          const newArray = [...prev[field]];
          newArray[index] = { ...newArray[index], [subfield]: value };
          return { ...prev, [field]: newArray };
        } else if (index !== null) {
          const newArray = [...prev[field]];
          newArray[index] = value;
          return { ...prev, [field]: newArray };
        } else if (field.includes('.')) {
          const [parent, child] = field.split('.');
          return {
            ...prev,
            [parent]: { ...prev[parent], [child]: value }
          };
        } else {
          return { ...prev, [field]: value };
        }
      });
    };

    const calculateTotals = () => {
      const totalIncome = formData.incomes.reduce((sum, item) =>
        sum + (parseFloat(item.amount) || 0), 0
      );
      const totalExpenses = formData.expenses.reduce((sum, item) =>
        sum + (parseFloat(item.amount) || 0), 0
      );
      const totalIiko = Object.values(formData.iikoData).reduce((sum, value) =>
        sum + (parseFloat(value) || 0), 0
      );

      const calculatedAmount = totalIiko - totalExpenses + totalIncome;
      const factualAmount = parseFloat(formData.iikoData.totalRevenue) || 0;
      const difference = calculatedAmount - factualAmount;

      return { totalIncome, totalExpenses, totalIiko, calculatedAmount, difference };
    };

    const handleSubmit = async () => {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.location || !formData.shift || !formData.cashierName || !formData.photo) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
      }

      setIsLoading(true);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ —Å–º–µ–Ω—ã...');

      try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
        const apiFormData = new FormData();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        apiFormData.append('location', formData.location);
        apiFormData.append('shift_type', formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night');
        apiFormData.append('cashier_name', formData.cashierName);

        // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        apiFormData.append('total_revenue', parseFloat(formData.iikoData.totalRevenue) || 0);
        apiFormData.append('returns', parseFloat(formData.iikoData.returns) || 0);
        apiFormData.append('acquiring', parseFloat(formData.iikoData.acquiring) || 0);
        apiFormData.append('qr_code', parseFloat(formData.iikoData.qrCode) || 0);
        apiFormData.append('online_app', parseFloat(formData.iikoData.onlineApp) || 0);
        apiFormData.append('yandex_food', parseFloat(formData.iikoData.yandexEda) || 0);
        apiFormData.append('fact_cash', calculateTotals().calculatedAmount);

        // –ü—Ä–∏—Ö–æ–¥—ã (JSON)
        const incomeEntries = formData.incomes
          .filter(item => item.amount && item.comment)
          .map(item => ({ amount: parseFloat(item.amount), comment: item.comment }));

        if (incomeEntries.length > 0) {
          apiFormData.append('income_entries_json', JSON.stringify(incomeEntries));
        }

        // –†–∞—Å—Ö–æ–¥—ã (JSON)
        const expenseEntries = formData.expenses
          .filter(item => item.name && item.amount)
          .map(item => ({ description: item.name, amount: parseFloat(item.amount) }));

        if (expenseEntries.length > 0) {
          apiFormData.append('expense_entries_json', JSON.stringify(expenseEntries));
        }

        // –§–æ—Ç–æ
        apiFormData.append('photo', formData.photo);

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

        const result = await apiService.createShiftReport(apiFormData);

        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        alert('‚úÖ –û—Ç—á–µ—Ç —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        setCurrentForm('menu');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    const totals = calculateTotals();

    return (
      <div className="min-h-screen bg-gray-900 text-white p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={() => setCurrentForm('menu')}
              className="p-2 bg-gray-700 rounded-lg hover:bg-gray-600"
              disabled={isLoading}
            >
              <Home size={20} />
            </button>
            <h1 className="text-2xl font-bold text-green-400">üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É, —Å–¥–∞—Ç—å –æ—Ç—á—ë—Ç</h1>
          </div>

          {/* Location Selection */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <MapPin size={16} className="text-red-400" />
              –ê–¥—Ä–µ—Å –ª–æ–∫–∞—Ü–∏–∏ *
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => handleInputChange('location', loc)}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-600 border-red-500 text-white' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600 text-gray-300'
                  }`}
                >
                  ‚Ä¢ {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Shift Selection */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <Clock size={16} className="text-yellow-400" />
              –í—ã–±–æ—Ä —Å–º–µ–Ω—ã *
            </label>
            <div className="flex gap-2">
              {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
                <button
                  key={shift}
                  onClick={() => handleInputChange('shift', shift)}
                  disabled={isLoading}
                  className={`flex-1 p-3 rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.shift === shift 
                      ? 'bg-yellow-600 border-yellow-500' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600'
                  }`}
                >
                  {shift} / {shift === '–£—Ç—Ä–æ' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
                </button>
              ))}
            </div>
          </div>

          {/* Date & Cashier */}
          <div className="mb-4">
            <label className="text-sm font-medium block mb-2">üìÖ –î–∞—Ç–∞ (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ú–°–ö)</label>
            <input
              type="text"
              value={formData.date}
              readOnly
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg"
            />
          </div>

          <div className="mb-6">
            <label className="text-sm font-medium block mb-2">üë§ –ò–º—è –∫–∞—Å—Å–∏—Ä–∞ *</label>
            <input
              type="text"
              value={formData.cashierName}
              onChange={(e) => handleInputChange('cashierName', e.target.value)}
              disabled={isLoading}
              className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Å—Å–∏—Ä–∞"
            />
          </div>

          {/* Income Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-green-400 mb-3">üí∞ –ü—Ä–∏—Ö–æ–¥ –¥–µ–Ω–µ–≥/–≤–Ω–µ—Å–µ–Ω–∏—è</h3>
            {formData.incomes.map((income, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 mb-2">
                <input
                  type="number"
                  placeholder="–°—É–º–º–∞"
                  value={income.amount}
                  onChange={(e) => handleInputChange('incomes', e.target.value, index, 'amount')}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50"
                />
                <input
                  type="text"
                  placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                  value={income.comment}
                  onChange={(e) => handleInputChange('incomes', e.target.value, index, 'comment')}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50"
                />
              </div>
            ))}
            <div className="text-right text-green-400 font-semibold">
              –ò—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥: {totals.totalIncome.toLocaleString()} ‚ÇΩ
            </div>
          </div>

          {/* Expenses Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-red-400 mb-3">üí∏ –†–∞—Å—Ö–æ–¥—ã</h3>
            {formData.expenses.map((expense, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–¢–µ–∫—Å—Ç"
                  value={expense.name}
                  onChange={(e) => handleInputChange('expenses', e.target.value, index, 'name')}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–°—É–º–º–∞"
                  value={expense.amount}
                  onChange={(e) => handleInputChange('expenses', e.target.value, index, 'amount')}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50"
                />
              </div>
            ))}
            <div className="text-right text-red-400 font-semibold">
              –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {totals.totalExpenses.toLocaleString()} ‚ÇΩ
            </div>
          </div>

          {/* iiko Information */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-400 mb-3">üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ iiko</h3>
            <div className="space-y-2">
              {[
                { key: 'totalRevenue', label: '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ *' },
                { key: 'returns', label: '–í–æ–∑–≤—Ä–∞—Ç' },
                { key: 'acquiring', label: '–≠–∫–≤–∞–π—Ä–∏–Ω–≥' },
                { key: 'qrCode', label: 'QR-–∫–æ–¥' },
                { key: 'onlineApp', label: '–û–Ω–ª–∞–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
                { key: 'yandexEda', label: '–Ø–Ω–¥–µ–∫—Å.–ï–¥–∞' }
              ].map(item => (
                <input
                  key={item.key}
                  type="number"
                  placeholder={item.label}
                  value={formData.iikoData[item.key]}
                  onChange={(e) => handleInputChange(`iikoData.${item.key}`, e.target.value)}
                  disabled={isLoading}
                  className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50"
                />
              ))}
            </div>
          </div>

          {/* Photo Upload */}
          <div className="mb-6">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <Camera size={16} className="text-purple-400" />
              –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–∞—Å—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ *
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={(e) => setFormData(prev => ({ ...prev, photo: e.target.files[0] }))}
              disabled={isLoading}
              className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-purple-600 file:text-white hover:file:bg-purple-700 disabled:opacity-50"
            />
            {formData.photo && (
              <p className="text-sm text-green-400 mt-2">‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {formData.photo.name}</p>
            )}
          </div>

          {/* Calculation Results */}
          <div className="mb-6 p-4 bg-gray-800 rounded-lg border border-gray-700">
            <h3 className="flex items-center gap-2 text-lg font-semibold text-yellow-400 mb-3">
              <Calculator size={20} />
              –†–∞—Å—á—ë—Ç —Å–≤–µ—Ä–∫–∏
            </h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞:</span>
                <span className="font-semibold">{totals.calculatedAmount.toLocaleString()} ‚ÇΩ</span>
              </div>
              <hr className="border-gray-600" />
              <div className={`flex justify-between font-bold ${totals.difference >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                <span>{totals.difference >= 0 ? '‚úÖ –ò–∑–ª–∏—à–µ–∫:' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—á–∞:'}</span>
                <span>{Math.abs(totals.difference).toLocaleString()} ‚ÇΩ</span>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => window.location.reload()}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors disabled:opacity-50"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-green-600 hover:bg-green-700 rounded-lg transition-colors font-semibold disabled:opacity-50"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Inventory Form
  const InventoryForm = () => {
    const [formData, setFormData] = useState({
      location: '',
      shift: '',
      date: getCurrentMSKTime(),
      conductor: '',
      items: {
        'IL Primo —Å—Ç–µ–∫–ª–æ': '',
        '–í–æ–¥–∞ –ì–æ—Ä–Ω–∞—è': '',
        '–î–æ–±—Ä—ã–π —Å–æ–∫ –ü–≠–¢': '',
        '–ö—É—Ä–∞–≥–æ–≤—ã–π –∫–æ–º–ø–æ—Ç': '',
        '–ù–∞–ø–∏—Ç–∫–∏ –ñ–ë': '',
        '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏': '',
        '–ö–æ–ª–¥ –ë—Ä—é': '',
        'Kinza –Ω–∞–ø–∏—Ç–∫–∏': '',
        '–ü–∞–ª–ª—ã': '',
        '–ë–∞—Ä–±–µ–∫—é –¥–∏–ø': '',
        '–ë—É–ª–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É': '',
        '–õ–∞–≤–∞—à': '',
        '–õ–µ–ø–µ—à–∫–∏': '',
        '–ö–µ—Ç—á—É–ø –¥–∏–ø': '',
        '–°—ã—Ä–Ω—ã–π —Å–æ—É—Å –¥–∏–ø': '',
        '–ö—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–Ω–∞—è': '',
        '–ö—É—Ä–∏—Ü–∞ —Å—ã—Ä–∞—è': ''
      }
    });

    const handleSubmit = async () => {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.location || !formData.shift || !formData.conductor) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
      }

      setIsLoading(true);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏...');

      try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
        const apiFormData = new FormData();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        apiFormData.append('location', formData.location);
        apiFormData.append('shift_type', formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night');
        apiFormData.append('cashier_name', formData.conductor);

        // –¢–æ–≤–∞—Ä—ã (—Å–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        apiFormData.append('il_primo_steklo', parseInt(formData.items['IL Primo —Å—Ç–µ–∫–ª–æ']) || 0);
        apiFormData.append('voda_gornaya', parseInt(formData.items['–í–æ–¥–∞ –ì–æ—Ä–Ω–∞—è']) || 0);
        apiFormData.append('dobri_sok_pet', parseInt(formData.items['–î–æ–±—Ä—ã–π —Å–æ–∫ –ü–≠–¢']) || 0);
        apiFormData.append('kuragovi_kompot', parseInt(formData.items['–ö—É—Ä–∞–≥–æ–≤—ã–π –∫–æ–º–ø–æ—Ç']) || 0);
        apiFormData.append('napitki_jb', parseInt(formData.items['–ù–∞–ø–∏—Ç–∫–∏ –ñ–ë']) || 0);
        apiFormData.append('energetiky', parseInt(formData.items['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏']) || 0);
        apiFormData.append('kold_bru', parseInt(formData.items['–ö–æ–ª–¥ –ë—Ä—é']) || 0);
        apiFormData.append('kinza_napitky', parseInt(formData.items['Kinza –Ω–∞–ø–∏—Ç–∫–∏']) || 0);
        apiFormData.append('palli', parseInt(formData.items['–ü–∞–ª–ª—ã']) || 0);
        apiFormData.append('barbeku_dip', parseInt(formData.items['–ë–∞—Ä–±–µ–∫—é –¥–∏–ø']) || 0);
        apiFormData.append('bulka_na_shaurmu', parseInt(formData.items['–ë—É–ª–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É']) || 0);
        apiFormData.append('lavash', parseInt(formData.items['–õ–∞–≤–∞—à']) || 0);
        apiFormData.append('ketchup_dip', parseInt(formData.items['–ö–µ—Ç—á—É–ø –¥–∏–ø']) || 0);
        apiFormData.append('sirny_sous_dip', parseInt(formData.items['–°—ã—Ä–Ω—ã–π —Å–æ—É—Å –¥–∏–ø']) || 0);
        apiFormData.append('kuriza_jareny', parseInt(formData.items['–ö—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–Ω–∞—è']) || 0);
        apiFormData.append('kuriza_siraya', parseInt(formData.items['–ö—É—Ä–∏—Ü–∞ —Å—ã—Ä–∞—è']) || 0);

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏...');

        const result = await apiService.createInventoryReport(apiFormData);

        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        alert('‚úÖ –û—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        setCurrentForm('menu');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    return (
      <div className="min-h-screen bg-gray-900 text-white p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={() => setCurrentForm('menu')}
              className="p-2 bg-gray-700 rounded-lg hover:bg-gray-600"
              disabled={isLoading}
            >
              <Home size={20} />
            </button>
            <h1 className="text-2xl font-bold text-blue-400">üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</h1>
          </div>

          {/* Location */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <MapPin size={16} className="text-red-400" />
              –õ–æ–∫–∞—Ü–∏—è: –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ *
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => setFormData(prev => ({ ...prev, location: loc }))}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-600 border-red-500 text-white' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600 text-gray-300'
                  }`}
                >
                  {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Shift */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <Clock size={16} className="text-yellow-400" />
              –°–º–µ–Ω–∞: –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ *
            </label>
            <div className="flex gap-2">
              {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
                <button
                  key={shift}
                  onClick={() => setFormData(prev => ({ ...prev, shift }))}
                  disabled={isLoading}
                  className={`flex-1 p-3 rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.shift === shift 
                      ? 'bg-yellow-600 border-yellow-500' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600'
                  }`}
                >
                  {shift} / {shift === '–£—Ç—Ä–æ' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
                </button>
              ))}
            </div>
          </div>

          {/* Date */}
          <div className="mb-4">
            <label className="text-sm font-medium block mb-2">üìÖ –î–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ –º—Å–∫)</label>
            <input
              type="text"
              value={formData.date}
              readOnly
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg"
            />
          </div>

          {/* Conductor */}
          <div className="mb-6">
            <label className="text-sm font-medium block mb-2">üë§ –ö—Ç–æ –ø—Ä–æ–≤–µ–ª *</label>
            <input
              type="text"
              value={formData.conductor}
              onChange={(e) => setFormData(prev => ({ ...prev, conductor: e.target.value }))}
              disabled={isLoading}
              className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
            />
          </div>

          {/* Items */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-400 mb-3">üìã –¢–æ–≤–∞—Ä:</h3>
            <div className="space-y-3">
              {Object.entries(formData.items).map(([item, value]) => (
                <div key={item} className="flex items-center gap-3">
                  <span className="flex-1 text-sm">{item}:</span>
                  <input
                    type="number"
                    value={value}
                    onChange={(e) => setFormData(prev => ({
                      ...prev,
                      items: { ...prev.items, [item]: e.target.value }
                    }))}
                    disabled={isLoading}
                    className="w-20 p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none text-center disabled:opacity-50"
                    placeholder="0"
                    min="0"
                  />
                </div>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => window.location.reload()}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors disabled:opacity-50"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors font-semibold disabled:opacity-50"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Receiving Report Form
  const ReceivingForm = () => {
    const [formData, setFormData] = useState({
      location: '',
      date: getCurrentMSKTime(),
      kitchen: Array(15).fill({ name: '', quantity: '' }),
      bar: Array(10).fill({ name: '', quantity: '' }),
      packaging: Array(5).fill({ name: '', quantity: '' })
    });

    const handleSubmit = async () => {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.location) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
      const hasKitchenItems = formData.kitchen.some(item => item.name && item.quantity);
      const hasBarItems = formData.bar.some(item => item.name && item.quantity);
      const hasPackagingItems = formData.packaging.some(item => item.name && item.quantity);

      if (!hasKitchenItems && !hasBarItems && !hasPackagingItems) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞');
        return;
      }

      setIsLoading(true);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤...');

      try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
        const apiFormData = new FormData();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        apiFormData.append('location', formData.location);

        // –ö—É—Ö–Ω—è
        const kuxnyaItems = formData.kitchen
          .filter(item => item.name && item.quantity)
          .map(item => ({ name: item.name, count: parseInt(item.quantity) }));

        if (kuxnyaItems.length > 0) {
          apiFormData.append('kuxnya_json', JSON.stringify(kuxnyaItems));
        }

        // –ë–∞—Ä
        const barItems = formData.bar
          .filter(item => item.name && item.quantity)
          .map(item => ({ name: item.name, count: parseInt(item.quantity) }));

        if (barItems.length > 0) {
          apiFormData.append('bar_json', JSON.stringify(barItems));
        }

        // –£–ø–∞–∫–æ–≤–∫–∏
        const upakovkiItems = formData.packaging
          .filter(item => item.name && item.quantity)
          .map(item => ({ name: item.name, count: parseInt(item.quantity) }));

        if (upakovkiItems.length > 0) {
          apiFormData.append('upakovki_json', JSON.stringify(upakovkiItems));
        }

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤...');

        const result = await apiService.createReceivingReport(apiFormData);

        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        alert('‚úÖ –û—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        setCurrentForm('menu');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    return (
      <div className="min-h-screen bg-gray-900 text-white p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={() => setCurrentForm('menu')}
              className="p-2 bg-gray-700 rounded-lg hover:bg-gray-600"
              disabled={isLoading}
            >
              <Home size={20} />
            </button>
            <h1 className="text-2xl font-bold text-purple-400">üì• –û—Ç—á—ë—Ç –ø—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–∞</h1>
          </div>

          {/* Location */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <MapPin size={16} className="text-red-400" />
              –õ–æ–∫–∞—Ü–∏—è: –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ *
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => setFormData(prev => ({ ...prev, location: loc }))}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-600 border-red-500 text-white' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600 text-gray-300'
                  }`}
                >
                  {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Date */}
          <div className="mb-6">
            <label className="text-sm font-medium block mb-2">üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã</label>
            <input
              type="text"
              value={formData.date}
              readOnly
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg"
            />
          </div>

          {/* Kitchen Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-orange-400 mb-3">üç≥ –ö—É—Ö–Ω—è</h3>
            <p className="text-sm text-gray-400 mb-3">15 –ø—É–Ω–∫—Ç–æ–≤ &gt; –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ<br />+ –∫–Ω–æ–ø–∫–∞ "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" (–¥–æ–±–∞–≤–ª—è–µ—Ç +1 –ø—É–Ω–∫—Ç)</p>
            {formData.kitchen.map((item, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => {
                    const newKitchen = [...formData.kitchen];
                    newKitchen[index] = { ...newKitchen[index], name: e.target.value };
                    setFormData(prev => ({ ...prev, kitchen: newKitchen }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-orange-500 focus:outline-none disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  value={item.quantity}
                  onChange={(e) => {
                    const newKitchen = [...formData.kitchen];
                    newKitchen[index] = { ...newKitchen[index], quantity: e.target.value };
                    setFormData(prev => ({ ...prev, kitchen: newKitchen }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-orange-500 focus:outline-none disabled:opacity-50"
                  min="1"
                />
              </div>
            ))}
            <button
              onClick={() => setFormData(prev => ({
                ...prev,
                kitchen: [...prev.kitchen, { name: '', quantity: '' }]
              }))}
              disabled={isLoading}
              className="w-full p-2 bg-orange-600 hover:bg-orange-700 rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
            >
              <Plus size={16} />
              –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
            </button>
          </div>

          {/* Bar Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-400 mb-3">üç∫ –ë–∞—Ä</h3>
            <p className="text-sm text-gray-400 mb-3">10 –ø—É–Ω–∫—Ç–æ–≤ &gt; –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ<br />+ –∫–Ω–æ–ø–∫–∞ "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" (–¥–æ–±–∞–≤–ª—è–µ—Ç +1 –ø—É–Ω–∫—Ç)</p>
            {formData.bar.map((item, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => {
                    const newBar = [...formData.bar];
                    newBar[index] = { ...newBar[index], name: e.target.value };
                    setFormData(prev => ({ ...prev, bar: newBar }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  value={item.quantity}
                  onChange={(e) => {
                    const newBar = [...formData.bar];
                    newBar[index] = { ...newBar[index], quantity: e.target.value };
                    setFormData(prev => ({ ...prev, bar: newBar }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50"
                  min="1"
                />
              </div>
            ))}
            <button
              onClick={() => setFormData(prev => ({
                ...prev,
                bar: [...prev.bar, { name: '', quantity: '' }]
              }))}
              disabled={isLoading}
              className="w-full p-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
            >
              <Plus size={16} />
              –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
            </button>
          </div>

          {/* Packaging Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-green-400 mb-3">üì¶ –£–ø–∞–∫–æ–≤–∫–∏/—Ö–æ–∑</h3>
            <p className="text-sm text-gray-400 mb-3">5 –ø—É–Ω–∫—Ç–æ–≤ &gt; –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ<br />+ –∫–Ω–æ–ø–∫–∞ "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ" (–¥–æ–±–∞–≤–ª—è–µ—Ç +1 –ø—É–Ω–∫—Ç)</p>
            {formData.packaging.map((item, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => {
                    const newPackaging = [...formData.packaging];
                    newPackaging[index] = { ...newPackaging[index], name: e.target.value };
                    setFormData(prev => ({ ...prev, packaging: newPackaging }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  value={item.quantity}
                  onChange={(e) => {
                    const newPackaging = [...formData.packaging];
                    newPackaging[index] = { ...newPackaging[index], quantity: e.target.value };
                    setFormData(prev => ({ ...prev, packaging: newPackaging }));
                  }}
                  disabled={isLoading}
                  className="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-green-500 focus:outline-none disabled:opacity-50"
                  min="1"
                />
              </div>
            ))}
            <button
              onClick={() => setFormData(prev => ({
                ...prev,
                packaging: [...prev.packaging, { name: '', quantity: '' }]
              }))}
              disabled={isLoading}
              className="w-full p-2 bg-green-600 hover:bg-green-700 rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
            >
              <Plus size={16} />
              –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
            </button>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => window.location.reload()}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors disabled:opacity-50"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-purple-600 hover:bg-purple-700 rounded-lg transition-colors font-semibold disabled:opacity-50"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Write-off Form
  const WriteOffForm = () => {
    const [formData, setFormData] = useState({
      location: '',
      date: getCurrentDate(),
      writeOffs: Array(10).fill({ name: '', weight: '', reason: '' }),
      transfers: Array(10).fill({ name: '', weight: '', reason: '' })
    });

    const handleSubmit = async () => {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.location) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
      const hasWriteOffs = formData.writeOffs.some(item => item.name && item.weight && item.reason);
      const hasTransfers = formData.transfers.some(item => item.name && item.weight && item.reason);

      if (!hasWriteOffs && !hasTransfers) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
        return;
      }

      setIsLoading(true);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–∫—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');

      try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
        const apiFormData = new FormData();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        apiFormData.append('location', formData.location);
        apiFormData.append('report_date', formData.date);

        // –°–ø–∏—Å–∞–Ω–∏—è
        const writeoffs = formData.writeOffs
          .filter(item => item.name && item.weight && item.reason)
          .map(item => ({
            name: item.name,
            weight: parseFloat(item.weight),
            reason: item.reason
          }));

        if (writeoffs.length > 0) {
          apiFormData.append('writeoffs_json', JSON.stringify(writeoffs));
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const transfers = formData.transfers
          .filter(item => item.name && item.weight && item.reason)
          .map(item => ({
            name: item.name,
            weight: parseFloat(item.weight),
            reason: item.reason
          }));

        if (transfers.length > 0) {
          apiFormData.append('transfers_json', JSON.stringify(transfers));
        }

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');

        const result = await apiService.createWriteOffReport(apiFormData);

        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        alert('‚úÖ –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        setCurrentForm('menu');

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    return (
      <div className="min-h-screen bg-gray-900 text-white p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={() => setCurrentForm('menu')}
              className="p-2 bg-gray-700 rounded-lg hover:bg-gray-600"
              disabled={isLoading}
            >
              <Home size={20} />
            </button>
            <h1 className="text-2xl font-bold text-red-400">üìã –ê–∫—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</h1>
          </div>

          {/* Location */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2">
              <MapPin size={16} className="text-red-400" />
              –õ–æ–∫–∞—Ü–∏—è: –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ *
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => setFormData(prev => ({ ...prev, location: loc }))}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-600 border-red-500 text-white' 
                      : 'bg-gray-800 border-gray-700 hover:border-gray-600 text-gray-300'
                  }`}
                >
                  {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Date */}
          <div className="mb-6">
            <label className="text-sm font-medium block mb-2">üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞</label>
            <input
              type="date"
              value={formData.date}
              onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
              disabled={isLoading}
              className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50"
            />
          </div>

          {/* Write-offs Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-red-400 mb-3">üóëÔ∏è –°–ø–∏—Å–∞–Ω–∏—è</h3>
            <p className="text-sm text-gray-400 mb-3">10 –ø—É–Ω–∫—Ç–æ–≤<br />–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è ‚Äî –≤–µ—Å (–∫–≥) ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –ø–æ—Ä—á–∏</p>
            {formData.writeOffs.map((item, index) => (
              <div key={index} className="grid grid-cols-3 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => {
                    const newWriteOffs = [...formData.writeOffs];
                    newWriteOffs[index] = { ...newWriteOffs[index], name: e.target.value };
                    setFormData(prev => ({ ...prev, writeOffs: newWriteOffs }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none text-sm disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–í–µ—Å (–∫–≥)"
                  value={item.weight}
                  onChange={(e) => {
                    const newWriteOffs = [...formData.writeOffs];
                    newWriteOffs[index] = { ...newWriteOffs[index], weight: e.target.value };
                    setFormData(prev => ({ ...prev, writeOffs: newWriteOffs }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none text-sm disabled:opacity-50"
                  step="0.1"
                  min="0.1"
                />
                <input
                  type="text"
                  placeholder="–ü—Ä–∏—á–∏–Ω–∞"
                  value={item.reason}
                  onChange={(e) => {
                    const newWriteOffs = [...formData.writeOffs];
                    newWriteOffs[index] = { ...newWriteOffs[index], reason: e.target.value };
                    setFormData(prev => ({ ...prev, writeOffs: newWriteOffs }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-red-500 focus:outline-none text-sm disabled:opacity-50"
                />
              </div>
            ))}
          </div>

          {/* Transfers Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-400 mb-3">‚ÜîÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ</h3>
            <p className="text-sm text-gray-400 mb-3">10 –ø—É–Ω–∫—Ç–æ–≤<br />–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è ‚Äî –≤–µ—Å (–∫–≥) ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</p>
            {formData.transfers.map((item, index) => (
              <div key={index} className="grid grid-cols-3 gap-2 mb-2">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => {
                    const newTransfers = [...formData.transfers];
                    newTransfers[index] = { ...newTransfers[index], name: e.target.value };
                    setFormData(prev => ({ ...prev, transfers: newTransfers }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none text-sm disabled:opacity-50"
                />
                <input
                  type="number"
                  placeholder="–í–µ—Å (–∫–≥)"
                  value={item.weight}
                  onChange={(e) => {
                    const newTransfers = [...formData.transfers];
                    newTransfers[index] = { ...newTransfers[index], weight: e.target.value };
                    setFormData(prev => ({ ...prev, transfers: newTransfers }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none text-sm disabled:opacity-50"
                  step="0.1"
                  min="0.1"
                />
                <input
                  type="text"
                  placeholder="–ü—Ä–∏—á–∏–Ω–∞"
                  value={item.reason}
                  onChange={(e) => {
                    const newTransfers = [...formData.transfers];
                    newTransfers[index] = { ...newTransfers[index], reason: e.target.value };
                    setFormData(prev => ({ ...prev, transfers: newTransfers }));
                  }}
                  disabled={isLoading}
                  className="p-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-blue-500 focus:outline-none text-sm disabled:opacity-50"
                />
              </div>
            ))}
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => window.location.reload()}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors disabled:opacity-50"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-red-600 hover:bg-red-700 rounded-lg transition-colors font-semibold disabled:opacity-50"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Render current form
  const renderCurrentForm = () => {
    switch (currentForm) {
      case 'menu': return <MainMenu />;
      case 'cashier': return <CashierReportForm />;
      case 'inventory': return <InventoryForm />;
      case 'receiving': return <ReceivingForm />;
      case 'writeoff': return <WriteOffForm />;
      default: return <MainMenu />;
    }
  };

  return renderCurrentForm();
};

export default TelegramWebApp;