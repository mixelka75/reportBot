import aiohttp
import asyncio
from typing import Optional, Dict, Any
from fastapi import UploadFile
from pathlib import Path
import json
import socket

from app.core.config import settings


class TelegramService:
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.chat_id = settings.TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ chat_id –∑–∞–¥–∞–Ω—ã
        if not self.bot_token or self.bot_token == "your_bot_token_here":
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            self.enabled = False
        elif not self.chat_id or self.chat_id == "your_group_chat_id_here":
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            self.enabled = False
        else:
            self.enabled = True
            print(f"‚úÖ Telegram —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Chat ID: {self.chat_id}")

    def get_topic_id_by_location(self, location: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–º—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏"""
        # –ú–∞–ø–ø–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π –Ω–∞ —Ç–µ–º—ã
        location_topics = {
            "–ì–∞–≥–∞—Ä–∏–Ω–∞ 48/1": settings.GAGARINA_48_TOPIC_ID,
            "–ê–±–¥—É–ª—Ö–∞–∫–∏–º–∞ –ò—Å–º–∞–∏–ª–æ–≤–∞ 51": settings.ABDULHAMID_51_TOPIC_ID,
            "–ì–∞–π–¥–∞—Ä–∞ –ì–∞–¥–∂–∏–µ–≤–∞ 7–ë": settings.GAIDAR_7B_TOPIC_ID,
        }

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if location in location_topics:
            topic_id = location_topics[location]
            return topic_id if topic_id > 0 else None

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        for loc_key, topic_id in location_topics.items():
            if location.lower() in loc_key.lower() or loc_key.lower() in location.lower():
                return topic_id if topic_id > 0 else None

        return None

    async def send_shift_report(self, report_data: Dict[str, Any], photo_path: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç —Å–º–µ–Ω—ã –≤ Telegram"""
        if not self.enabled:
            print("üîï Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
            return False

        try:
            topic_id = self.get_topic_id_by_location(report_data.get('location', ''))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_shift_report_message(report_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            success = await self._send_photo_with_caption(message, photo_path, topic_id)

            if success:
                print(f"‚úÖ –û—Ç—á–µ—Ç —Å–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")
            else:
                print(f"‚ö†Ô∏è  –û—Ç—á–µ—Ç —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")

            return success

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—Ç—á–µ—Ç —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False

    async def send_daily_inventory_report(self, report_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
        if not self.enabled:
            print("üîï Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
            return False

        try:
            topic_id = self.get_topic_id_by_location(report_data.get('location', ''))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_daily_inventory_message(report_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self._send_message(message, topic_id)

            if success:
                print(f"‚úÖ –û—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")
            else:
                print(
                    f"‚ö†Ô∏è  –û—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")

            return success

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False

    async def send_goods_report(self, report_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram"""
        if not self.enabled:
            print("üîï Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
            return False

        try:
            topic_id = self.get_topic_id_by_location(report_data.get('location', ''))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_goods_report_message(report_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self._send_message(message, topic_id)

            if success:
                print(f"‚úÖ –û—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")
            else:
                print(
                    f"‚ö†Ô∏è  –û—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")

            return success

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False

    def _format_shift_report_message(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å–º–µ–Ω—ã"""
        shift_emoji = "üåÖ" if data.get('shift_type') == 'morning' else "üåô"

        message = f"""üìä <b>–û–¢–ß–Å–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –°–ú–ï–ù–´</b> {shift_emoji}

üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üë§ <b>–ö–∞—Å—Å–∏—Ä:</b> {data.get('cashier_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ <b>–°–º–µ–Ω–∞:</b> {'–£—Ç—Ä–µ–Ω–Ω—è—è' if data.get('shift_type') == 'morning' else '–ù–æ—á–Ω–∞—è'}
üïê <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {data.get('date', '').strftime('%d.%m.%Y %H:%M') if data.get('date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí∞ <b>–§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>
- –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{data.get('total_revenue', 0):,.2f}‚ÇΩ</b>
- –í–æ–∑–≤—Ä–∞—Ç—ã: <b>{data.get('returns', 0):,.2f}‚ÇΩ</b>

üè¶ <b>–ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò:</b>
- –≠–∫–≤–∞–π—Ä–∏–Ω–≥: <b>{data.get('acquiring', 0):,.2f}‚ÇΩ</b>
- QR –∫–æ–¥: <b>{data.get('qr_code', 0):,.2f}‚ÇΩ</b>
- –û–Ω–ª–∞–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: <b>{data.get('online_app', 0):,.2f}‚ÇΩ</b>
- –Ø–Ω–¥–µ–∫—Å –ï–¥–∞: <b>{data.get('yandex_food', 0):,.2f}‚ÇΩ</b>
- <b>–ò—Ç–æ–≥–æ —ç–∫–≤–∞–π—Ä–∏–Ω–≥: {data.get('total_acquiring', 0):,.2f}‚ÇΩ</b>

üìà <b>–ü–†–ò–•–û–î–´:</b>
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Ö–æ–¥—ã
        income_entries = data.get('income_entries', [])
        if income_entries:
            for entry in income_entries:
                message += f"‚Ä¢ {entry.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}: <b>{entry.get('amount', 0):,.2f}‚ÇΩ</b>\n"
        else:
            message += "‚Ä¢ –ü—Ä–∏—Ö–æ–¥–æ–≤ –Ω–µ—Ç\n"

        message += f"<b>–ò—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥—ã: {data.get('total_income', 0):,.2f}‚ÇΩ</b>\n\n"

        message += "üìâ <b>–†–ê–°–•–û–î–´:</b>\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        expense_entries = data.get('expense_entries', [])
        if expense_entries:
            for entry in expense_entries:
                message += f"‚Ä¢ {entry.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}: <b>{entry.get('amount', 0):,.2f}‚ÇΩ</b>\n"
        else:
            message += "‚Ä¢ –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç\n"

        message += f"<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {data.get('total_expenses', 0):,.2f}‚ÇΩ</b>\n\n"

        # –†–∞—Å—á–µ—Ç—ã
        calculated = data.get('calculated_amount', 0)
        fact_cash = data.get('fact_cash', 0)
        surplus_shortage = data.get('surplus_shortage', 0)

        message += f"""üßÆ <b>–†–ê–°–ß–Å–¢ –°–í–ï–†–ö–ò:</b>
<code>({data.get('total_revenue', 0)} - {data.get('returns', 0)} + {data.get('total_income', 0)} - {data.get('total_expenses', 0)} - {data.get('total_acquiring', 0)}) = {calculated:,.2f}‚ÇΩ</code>

üíµ <b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–∞—Å—Å–µ:</b> <b>{fact_cash:,.2f}‚ÇΩ</b>
üßÆ <b>–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞:</b> <b>{calculated:,.2f}‚ÇΩ</b>

"""

        if surplus_shortage > 0:
            message += f"‚úÖ <b>–ò–∑–ª–∏—à–µ–∫: +{surplus_shortage:,.2f}‚ÇΩ</b>"
        elif surplus_shortage < 0:
            message += f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—á–∞: {surplus_shortage:,.2f}‚ÇΩ</b>"
        else:
            message += f"‚úÖ <b>–°—Ö–æ–¥–∏—Ç—Å—è: {surplus_shortage:,.2f}‚ÇΩ</b>"

        return message

    def _format_daily_inventory_message(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        shift_emoji = "üåÖ" if data.get('shift_type') == 'morning' else "üåô"

        message = f"""üì¶ <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–Ø</b> {shift_emoji}

üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üë§ <b>–ö–∞—Å—Å–∏—Ä:</b> {data.get('cashier_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ <b>–°–º–µ–Ω–∞:</b> {'–£—Ç—Ä–µ–Ω–Ω—è—è' if data.get('shift_type') == 'morning' else '–ù–æ—á–Ω–∞—è'}
üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {data.get('date', '').strftime('%d.%m.%Y %H:%M') if data.get('date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

ü•§ <b>–ù–ê–ü–ò–¢–ö–ò:</b>
- IL Primo —Å—Ç–µ–∫–ª–æ: <b>{data.get('il_primo_steklo', 0)} —à—Ç</b>
- –í–æ–¥–∞ –≥–æ—Ä–Ω–∞—è: <b>{data.get('voda_gornaya', 0)} —à—Ç</b>
- –î–æ–±—Ä—ã–π —Å–æ–∫ –ü–≠–¢: <b>{data.get('dobri_sok_pet', 0)} —à—Ç</b>
- –ö—É—Ä–∞–≥–æ–≤—ã–π –∫–æ–º–ø–æ—Ç: <b>{data.get('kuragovi_kompot', 0)} —à—Ç</b>
- –ù–∞–ø–∏—Ç–∫–∏ JB: <b>{data.get('napitki_jb', 0)} —à—Ç</b>
- –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏: <b>{data.get('energetiky', 0)} —à—Ç</b>
- –ö–æ–ª–¥ –±—Ä—é: <b>{data.get('kold_bru', 0)} —à—Ç</b>
- –ö–∏–Ω–∑–∞ –Ω–∞–ø–∏—Ç–∫–∏: <b>{data.get('kinza_napitky', 0)} —à—Ç</b>

üçΩÔ∏è <b>–ï–î–ê –ò –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:</b>
- –ü–∞–ª–ª–∏: <b>{data.get('palli', 0)} —à—Ç</b>
- –ë–∞—Ä–±–µ–∫—é –¥–∏–ø: <b>{data.get('barbeku_dip', 0)} —à—Ç</b>
- –ë—É–ª–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É: <b>{data.get('bulka_na_shaurmu', 0)} —à—Ç</b>
- –õ–∞–≤–∞—à: <b>{data.get('lavash', 0)} —à—Ç</b>
- –ö–µ—Ç—á—É–ø –¥–∏–ø: <b>{data.get('ketchup_dip', 0)} —à—Ç</b>
- –°—ã—Ä–Ω—ã–π —Å–æ—É—Å –¥–∏–ø: <b>{data.get('sirny_sous_dip', 0)} —à—Ç</b>
- –ö—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–∞—è: <b>{data.get('kuriza_jareny', 0)} —à—Ç</b>
- –ö—É—Ä–∏—Ü–∞ —Å—ã—Ä–∞—è: <b>{data.get('kuriza_siraya', 0)} —à—Ç</b>
"""

        return message

    def _format_goods_report_message(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        message = f"""üìã <b>–û–¢–ß–Å–¢ –ü–†–ò–Å–ú–ê –¢–û–í–ê–†–ê</b>

üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üïê <b>–î–∞—Ç–∞:</b> {data.get('date', '').strftime('%d.%m.%Y %H:%M') if data.get('date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

"""

        # –ö—É—Ö–Ω—è
        kuxnya = data.get('kuxnya', [])
        if kuxnya:
            message += "üç≥ <b>–ö–£–•–ù–Ø:</b>\n"
            for item in kuxnya:
                message += f"‚Ä¢ {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}: <b>{item.get('count', 0)} —à—Ç</b>\n"
            message += "\n"

        # –ë–∞—Ä
        bar = data.get('bar', [])
        if bar:
            message += "üçπ <b>–ë–ê–†:</b>\n"
            for item in bar:
                message += f"‚Ä¢ {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}: <b>{item.get('count', 0)} —à—Ç</b>\n"
            message += "\n"

        # –£–ø–∞–∫–æ–≤–∫–∏/—Ö–æ–∑
        upakovki = data.get('upakovki_xoz', [])
        if upakovki:
            message += "üì¶ <b>–£–ü–ê–ö–û–í–ö–ò/–•–û–ó:</b>\n"
            for item in upakovki:
                message += f"‚Ä¢ {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}: <b>{item.get('count', 0)} —à—Ç</b>\n"

        return message

    async def _send_message(self, text: str, topic_id: Optional[int] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            url = f"{self.base_url}/sendMessage"

            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }

            if topic_id:
                data['message_thread_id'] = topic_id

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            timeout = aiohttp.ClientTimeout(total=10, connect=5)

            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, data=data) as response:
                    if response.status != 200:
                        response_text = await response.text()
                        print(f"Telegram API –æ—à–∏–±–∫–∞ (—Ç–µ–∫—Å—Ç): {response.status} - {response_text}")
                    return response.status == 200

        except (aiohttp.ClientError, socket.gaierror, OSError) as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            return False
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            return False

    async def _send_photo_with_caption(self, caption: str, photo_path: str, topic_id: Optional[int] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            url = f"{self.base_url}/sendPhoto"

            # –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è multipart/form-data
            data = aiohttp.FormData()
            data.add_field('chat_id', str(self.chat_id))
            data.add_field('caption', caption)
            data.add_field('parse_mode', 'HTML')

            if topic_id:
                data.add_field('message_thread_id', str(topic_id))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not Path(photo_path).exists():
                print(f"–§–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                return False

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(photo_path, 'rb') as photo_file:
                data.add_field('photo', photo_file, filename='report.jpg', content_type='image/jpeg')

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                timeout = aiohttp.ClientTimeout(total=30, connect=10)

                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.post(url, data=data) as response:
                        if response.status != 200:
                            response_text = await response.text()
                            print(f"Telegram API –æ—à–∏–±–∫–∞ (—Ñ–æ—Ç–æ): {response.status} - {response_text}")
                        return response.status == 200

        except (aiohttp.ClientError, socket.gaierror, OSError) as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {str(e)}")
            return False
        except FileNotFoundError:
            print(f"–§–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
            return False
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {str(e)}")
            return False

    async def send_writeoff_transfer_report(self, report_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.enabled:
            print("üîï Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
            return False

        try:
            topic_id = self.get_topic_id_by_location(report_data.get('location', ''))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_writeoff_transfer_message(report_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self._send_message(message, topic_id)

            if success:
                print(f"‚úÖ –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")
            else:
                print(
                    f"‚ö†Ô∏è  –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {report_data.get('location')}")

            return success

        except Exception as e:
            print(f"‚ö†Ô∏è  –ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False

    def _format_writeoff_transfer_message(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        message = f"""üìã <b>–ê–ö–¢ –°–ü–ò–°–ê–ù–ò–Ø / –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø</b>

üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìÜ <b>–î–∞—Ç–∞:</b> {data.get('report_date', '').strftime('%d.%m.%Y') if data.get('report_date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

"""

        # –°–ø–∏—Å–∞–Ω–∏—è
        writeoffs = data.get('writeoffs', [])
        if writeoffs:
            message += "üóë <b>–°–ü–ò–°–ê–ù–ò–ï:</b>\n"
            for item in writeoffs:
                weight_text = f"{item.get('weight', 0)} –∫–≥" if isinstance(item.get('weight'), (
                int, float)) else f"{item.get('weight', 0)} —à—Ç"
                message += f"‚Ä¢ {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Äî <b>{weight_text}</b> ‚Äî {item.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            message += "\n"

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        transfers = data.get('transfers', [])
        if transfers:
            message += "üîÑ <b>–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï:</b>\n"
            for item in transfers:
                weight_text = f"{item.get('weight', 0)} –∫–≥" if isinstance(item.get('weight'), (
                int, float)) else f"{item.get('weight', 0)} —à—Ç"
                message += f"‚Ä¢ {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Äî <b>{weight_text}</b> ‚Äî {item.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        return message