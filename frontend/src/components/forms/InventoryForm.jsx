import React, { useState, useEffect, useCallback } from 'react';
import { MapPin, Clock, Send, RefreshCw, Home, Package, Search } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ValidationAlert } from '../common/ValidationAlert';
import { ConfirmationModal } from '../common/ConfirmationModal';
import { useAutoSave } from '../../hooks/useAutoSave';
import { useFormData } from '../../hooks/useFormData';
import { getCurrentMSKTime } from '../../utils/dateUtils';

export const InventoryForm = ({
  isLoading,
  setIsLoading,
  validationErrors,
  setValidationErrors,
  showValidationErrors,
  showNotification,
  clearCurrentDraft,
  currentDraftId,
  loadDraft,
  saveDraft,
  goToMenu,
  locations,
  apiService
}) => {
  const [formData, setFormData] = useState({
    location: '',
    shift: '',
    date: getCurrentMSKTime(),
    conductor: '',
    inventory_data: []
  });

  const [showClearModal, setShowClearModal] = useState(false);
  const [availableItems, setAvailableItems] = useState([]);
  const [itemsLoading, setItemsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const { handleNumberInput } = useFormData(validationErrors, setValidationErrors);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API
  useEffect(() => {
    const loadItems = async () => {
      setItemsLoading(true);
      try {
        const response = await apiService.getInventoryItems({
          is_active: true,
          limit: 1000
        });

        const items = response.items || [];
        setAvailableItems(items);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º inventory_data —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        setFormData(prev => ({
          ...prev,
          inventory_data: items.map(item => ({
            item_id: item.id,
            quantity: 0
          }))
        }));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setItemsLoading(false);
      }
    };

    loadItems();
  }, [apiService, showNotification]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentDraftId && availableItems.length > 0) {
      const draftData = loadDraft(currentDraftId);
      if (draftData) {
        setFormData(draftData);
      }
    }
  }, [currentDraftId, loadDraft, availableItems]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const autoSaveFunction = useCallback(async (data) => {
    if (data.location || data.shift || data.conductor ||
        (data.inventory_data && data.inventory_data.some(item => item.quantity > 0))) {
      await saveDraft('inventory', data);
    }
  }, [saveDraft]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 300–º—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–∞
  useAutoSave(formData, autoSaveFunction, 300);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [validationErrors, setValidationErrors]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const handleQuantityChange = useCallback((itemId, quantity) => {
    const numQuantity = Math.max(0, parseInt(quantity) || 0);

    setFormData(prev => ({
      ...prev,
      inventory_data: prev.inventory_data.map(entry =>
        entry.item_id === itemId
          ? { ...entry, quantity: numQuantity }
          : entry
      )
    }));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã
  const handleClearForm = useCallback(() => {
    if (currentDraftId) {
      clearCurrentDraft();
    }
    setValidationErrors({});
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ 0
    setFormData(prev => ({
      ...prev,
      location: '',
      shift: '',
      conductor: '',
      inventory_data: prev.inventory_data.map(entry => ({
        ...entry,
        quantity: 0
      }))
    }));
  }, [currentDraftId, clearCurrentDraft, setValidationErrors]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredItems = availableItems.filter(item =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
  const getQuantityForItem = useCallback((itemId) => {
    const entry = formData.inventory_data.find(item => item.item_id === itemId);
    return entry ? entry.quantity : 0;
  }, [formData.inventory_data]);

  const handleSubmit = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};

    if (!formData.location) errors.location = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é';
    if (!formData.shift) errors.shift = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É';
    if (!formData.conductor.trim()) errors.conductor = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0
    const hasItems = formData.inventory_data.some(item => item.quantity > 0);
    if (!hasItems) {
      errors.items = '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞';
    }

    if (Object.keys(errors).length > 0) {
      showValidationErrors(errors);
      return;
    }

    setIsLoading(true);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API v2
      const submitData = {
        location: formData.location,
        shift_type: formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night',
        cashier_name: formData.conductor,
        inventory_data: formData.inventory_data.filter(item => item.quantity > 0) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0
      };

      const result = await apiService.createInventoryReportV2(submitData);
      clearCurrentDraft(); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      showNotification('success', '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', '–û—Ç—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  }, [formData, apiService, showNotification, showValidationErrors, clearCurrentDraft, setIsLoading]);

  return (
    <>
      <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={goToMenu}
              className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
              disabled={isLoading}
            >
              <Home size={20} className="text-gray-600" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-blue-600">üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</h1>
              {currentDraftId && (
                <p className="text-sm text-blue-600">‚úì –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
              )}
            </div>
          </div>

          {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          <ValidationAlert errors={validationErrors} />

          {/* Location */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <MapPin size={16} className="text-red-500" />
              üìç –õ–æ–∫–∞—Ü–∏—è:
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => handleInputChange('location', loc)}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-500 border-red-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.location ? 'border-red-400 bg-red-50' : ''}`}
                >
                  {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Shift */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <Clock size={16} className="text-yellow-500" />
              üåô –°–º–µ–Ω–∞:
            </label>
            <div className="flex gap-2">
              {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
                <button
                  key={shift}
                  onClick={() => handleInputChange('shift', shift)}
                  disabled={isLoading}
                  className={`flex-1 p-3 rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.shift === shift 
                      ? 'bg-yellow-500 border-yellow-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.shift ? 'border-red-400 bg-red-50' : ''}`}
                >
                  {shift} / {shift === '–£—Ç—Ä–æ' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
                </button>
              ))}
            </div>
          </div>

          {/* Date */}
          <div className="mb-4">
            <label className="text-sm font-medium block mb-2 text-gray-700">üìÜ –î–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ –º—Å–∫)</label>
            <input
              type="text"
              value={formData.date}
              readOnly
              className="w-full p-3 bg-gray-100 border border-gray-300 rounded-lg text-gray-700"
            />
          </div>

          {/* Conductor */}
          <div className="mb-6">
            <label className="text-sm font-medium block mb-2 text-gray-700">üìä –ö—Ç–æ –ø—Ä–æ–≤–µ–ª:*</label>
            <MemoizedInput
              type="text"
              value={formData.conductor}
              onChange={(e) => handleInputChange('conductor', e.target.value)}
              disabled={isLoading}
              className="w-full p-3 bg-white border rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors border-gray-300"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
              name="conductor"
              id="conductor"
              hasError={!!validationErrors.conductor}
            />
          </div>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
          {itemsLoading ? (
            <div className="mb-6 p-8 text-center bg-white border border-gray-200 rounded-lg">
              <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>
            </div>
          ) : availableItems.length === 0 ? (
            <div className="mb-6 p-8 text-center bg-white border border-gray-200 rounded-lg">
              <Package size={48} className="mx-auto mb-4 text-gray-400" />
              <p className="text-gray-600 mb-2">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
              <p className="text-sm text-gray-500">–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</p>
            </div>
          ) : (
            <>
              {/* –ü–æ–∏—Å–∫ */}
              <div className="mb-4 bg-white border border-gray-200 rounded-lg p-4">
                <div className="relative">
                  <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {filteredItems.length} –∏–∑ {availableItems.length}
                </div>
              </div>

              {/* –¢–æ–≤–∞—Ä—ã –µ–¥–∏–Ω—ã–º —Å–ø–∏—Å–∫–æ–º */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-blue-600 mb-3">üìã –¢–æ–≤–∞—Ä—ã:</h3>
                {validationErrors.items && (
                  <div className="mb-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-700 text-sm">‚ö†Ô∏è {validationErrors.items}</p>
                  </div>
                )}

                {filteredItems.length === 0 ? (
                  <div className="p-6 text-center bg-white border border-gray-200 rounded-lg">
                    <p className="text-gray-600">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ–∏—Å–∫—É</p>
                  </div>
                ) : (
                  <div className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="space-y-3">
                      {filteredItems.map(item => {
                        const quantity = getQuantityForItem(item.id);

                        return (
                          <div key={item.id} className="flex items-center gap-3 bg-gray-50 p-3 rounded-lg">
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {item.name}
                              </p>
                              <p className="text-xs text-gray-600">
                                ID: {item.id} ‚Ä¢ {item.unit}
                              </p>
                            </div>
                            <div className="flex-shrink-0">
                              <MemoizedInput
                                type="text"
                                value={quantity}
                                onChange={(e) => handleNumberInput(e, (newValue) =>
                                  handleQuantityChange(item.id, newValue)
                                )}
                                disabled={isLoading}
                                className="w-20 p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-center disabled:opacity-50 transition-colors"
                                placeholder="0"
                                name={`item-${item.id}`}
                                id={`item-${item.id}`}
                              />
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            </>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => setShowClearModal(true)}
              disabled={isLoading || itemsLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-colors disabled:opacity-50 text-gray-700 shadow-sm hover:shadow-md"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading || itemsLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-semibold disabled:opacity-50 shadow-md hover:shadow-lg"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
          <div className="mb-6 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-700">
              ‚ú® <strong>–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</strong> –¢–æ–≤–∞—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –µ–¥–∏–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
              –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
            </p>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ */}
      <ConfirmationModal
        isOpen={showClearModal}
        onClose={() => setShowClearModal(false)}
        onConfirm={handleClearForm}
        title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
        confirmText="–û—á–∏—Å—Ç–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="warning"
      />
    </>
  );
};