import React, { useState, useEffect, useCallback } from 'react';
import { MapPin, Clock, Send, RefreshCw, Home } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ValidationAlert } from '../common/ValidationAlert';
import { useAutoSave } from '../../hooks/useAutoSave';
import { useFormData } from '../../hooks/useFormData';
import { getCurrentMSKTime } from '../../utils/dateUtils';

export const InventoryForm = ({
  isLoading,
  setIsLoading,
  validationErrors,
  setValidationErrors,
  showValidationErrors,
  showNotification,
  clearCurrentDraft,
  currentDraftId,
  loadDraft,
  saveDraft,
  goToMenu,
  locations,
  apiService
}) => {
  const [formData, setFormData] = useState({
    location: '',
    shift: '',
    date: getCurrentMSKTime(),
    conductor: '',
    items: {
      'IL Primo —Å—Ç–µ–∫–ª–æ': '',
      '–í–æ–¥–∞ –ì–æ—Ä–Ω–∞—è': '',
      '–î–æ–±—Ä—ã–π —Å–æ–∫ –ü–≠–¢': '',
      '–ö—É—Ä–∞–≥–æ–≤—ã–π –∫–æ–º–ø–æ—Ç': '',
      '–ù–∞–ø–∏—Ç–∫–∏ –ñ–ë': '',
      '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏': '',
      '–ö–æ–ª–¥ –ë—Ä—é': '',
      'Kinza –Ω–∞–ø–∏—Ç–∫–∏': '',
      '–ü–∞–ª–ø–∏': '',
      '–ë–∞—Ä–±–µ–∫—é –¥–∏–ø': '',
      '–ë—É–ª–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É': '',
      '–õ–∞–≤–∞—à': '',
      '–õ–µ–ø–µ—à–∫–∏': '',
      '–ö–µ—Ç—á—É–ø –¥–∏–ø': '',
      '–°—ã—Ä–Ω—ã–π —Å–æ—É—Å –¥–∏–ø': '',
      '–ö—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–Ω–∞—è': '',
      '–ö—É—Ä–∏—Ü–∞ —Å—ã—Ä–∞—è': ''
    }
  });

  const { handleNumberInput } = useFormData(validationErrors, setValidationErrors);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentDraftId) {
      const draftData = loadDraft(currentDraftId);
      if (draftData) {
        setFormData(draftData);
      }
    }
  }, [currentDraftId, loadDraft]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const autoSaveFunction = useCallback(async (data) => {
    if (data.location || data.shift || data.conductor ||
        Object.values(data.items).some(v => v)) {
      await saveDraft('inventory', data);
    }
  }, [saveDraft]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 300–º—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–∞
  useAutoSave(formData, autoSaveFunction, 300);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [validationErrors, setValidationErrors]);

  const handleItemChange = useCallback((item, value) => {
    setFormData(prev => ({
      ...prev,
      items: { ...prev.items, [item]: value }
    }));
  }, []);

  const handleSubmit = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};

    if (!formData.location) errors.location = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é';
    if (!formData.shift) errors.shift = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É';
    if (!formData.conductor.trim()) errors.conductor = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';

    if (Object.keys(errors).length > 0) {
      showValidationErrors(errors);
      return;
    }

    setIsLoading(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
      const apiFormData = new FormData();

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      apiFormData.append('location', formData.location);
      apiFormData.append('shift_type', formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night');
      apiFormData.append('cashier_name', formData.conductor);

      // –¢–æ–≤–∞—Ä—ã (—Å–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
      apiFormData.append('il_primo_steklo', parseInt(formData.items['IL Primo —Å—Ç–µ–∫–ª–æ']) || 0);
      apiFormData.append('voda_gornaya', parseInt(formData.items['–í–æ–¥–∞ –ì–æ—Ä–Ω–∞—è']) || 0);
      apiFormData.append('dobri_sok_pet', parseInt(formData.items['–î–æ–±—Ä—ã–π —Å–æ–∫ –ü–≠–¢']) || 0);
      apiFormData.append('kuragovi_kompot', parseInt(formData.items['–ö—É—Ä–∞–≥–æ–≤—ã–π –∫–æ–º–ø–æ—Ç']) || 0);
      apiFormData.append('napitki_jb', parseInt(formData.items['–ù–∞–ø–∏—Ç–∫–∏ –ñ–ë']) || 0);
      apiFormData.append('energetiky', parseInt(formData.items['–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏']) || 0);
      apiFormData.append('kold_bru', parseInt(formData.items['–ö–æ–ª–¥ –ë—Ä—é']) || 0);
      apiFormData.append('kinza_napitky', parseInt(formData.items['Kinza –Ω–∞–ø–∏—Ç–∫–∏']) || 0);
      apiFormData.append('palli', parseInt(formData.items['–ü–∞–ª–ø–∏']) || 0);
      apiFormData.append('barbeku_dip', parseInt(formData.items['–ë–∞—Ä–±–µ–∫—é –¥–∏–ø']) || 0);
      apiFormData.append('bulka_na_shaurmu', parseInt(formData.items['–ë—É–ª–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É']) || 0);
      apiFormData.append('lavash', parseInt(formData.items['–õ–∞–≤–∞—à']) || 0);
      apiFormData.append('lepeshki', parseInt(formData.items['–õ–µ–ø–µ—à–∫–∏']) || 0);
      apiFormData.append('ketchup_dip', parseInt(formData.items['–ö–µ—Ç—á—É–ø –¥–∏–ø']) || 0);
      apiFormData.append('sirny_sous_dip', parseInt(formData.items['–°—ã—Ä–Ω—ã–π —Å–æ—É—Å –¥–∏–ø']) || 0);
      apiFormData.append('kuriza_jareny', parseInt(formData.items['–ö—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–Ω–∞—è']) || 0);
      apiFormData.append('kuriza_siraya', parseInt(formData.items['–ö—É—Ä–∏—Ü–∞ —Å—ã—Ä–∞—è']) || 0);

      const result = await apiService.createInventoryReport(apiFormData);
      clearCurrentDraft(); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      showNotification('success', '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', '–û—Ç—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  }, [formData, apiService, showNotification, showValidationErrors, clearCurrentDraft, setIsLoading]);

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
      <div className="max-w-md mx-auto">
        <div className="flex items-center gap-4 mb-6">
          <button
            onClick={goToMenu}
            className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
            disabled={isLoading}
          >
            <Home size={20} className="text-gray-600" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-blue-600">üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</h1>
            {currentDraftId && (
              <p className="text-sm text-blue-600">‚úì –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
            )}
          </div>
        </div>

        {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
        <ValidationAlert errors={validationErrors} />

        {/* Location */}
        <div className="mb-4">
          <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
            <MapPin size={16} className="text-red-500" />
            üìç –õ–æ–∫–∞—Ü–∏—è:
          </label>
          <div className="space-y-2">
            {locations.map(loc => (
              <button
                key={loc}
                onClick={() => handleInputChange('location', loc)}
                disabled={isLoading}
                className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                  formData.location === loc 
                    ? 'bg-red-500 border-red-500 text-white shadow-md' 
                    : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                } ${validationErrors.location ? 'border-red-400 bg-red-50' : ''}`}
              >
                {loc}
              </button>
            ))}
          </div>
        </div>

        {/* Shift */}
        <div className="mb-4">
          <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
            <Clock size={16} className="text-yellow-500" />
            üåô –°–º–µ–Ω–∞:
          </label>
          <div className="flex gap-2">
            {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
              <button
                key={shift}
                onClick={() => handleInputChange('shift', shift)}
                disabled={isLoading}
                className={`flex-1 p-3 rounded-lg border transition-colors disabled:opacity-50 ${
                  formData.shift === shift 
                    ? 'bg-yellow-500 border-yellow-500 text-white shadow-md' 
                    : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                } ${validationErrors.shift ? 'border-red-400 bg-red-50' : ''}`}
              >
                {shift} / {shift === '–£—Ç—Ä–æ' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
              </button>
            ))}
          </div>
        </div>

        {/* Date */}
        <div className="mb-4">
          <label className="text-sm font-medium block mb-2 text-gray-700">üìÜ –î–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ –º—Å–∫)</label>
          <input
            type="text"
            value={formData.date}
            readOnly
            className="w-full p-3 bg-gray-100 border border-gray-300 rounded-lg text-gray-700"
          />
        </div>

        {/* Conductor */}
        <div className="mb-6">
          <label className="text-sm font-medium block mb-2 text-gray-700">üìä –ö—Ç–æ –ø—Ä–æ–≤–µ–ª:*</label>
          <MemoizedInput
            type="text"
            value={formData.conductor}
            onChange={(e) => handleInputChange('conductor', e.target.value)}
            disabled={isLoading}
            className="w-full p-3 bg-white border rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors border-gray-300"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
            name="conductor"
            id="conductor"
            hasError={!!validationErrors.conductor}
          />
        </div>

        {/* Items */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-blue-600 mb-3">üìã –¢–æ–≤–∞—Ä:</h3>
          <div className="space-y-3">
            {Object.entries(formData.items).map(([item, value]) => (
              <div key={item} className="flex items-center gap-3 bg-white p-3 rounded-lg border border-gray-300 shadow-sm">
                <span className="flex-1 text-sm text-gray-700">{item}</span>
                <MemoizedInput
                  type="text"
                  value={value}
                  onChange={(e) => handleNumberInput(e, (newValue) =>
                    handleItemChange(item, newValue)
                  )}
                  disabled={isLoading}
                  className="w-20 p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-center disabled:opacity-50 transition-colors"
                  placeholder="0"
                  name={`item-${item}`}
                  id={`item-${item}`}
                />
              </div>
            ))}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3 mb-6">
          <button
            onClick={() => {
              window.location.reload();
            }}
            disabled={isLoading}
            className="flex-1 flex items-center justify-center gap-2 p-3 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-colors disabled:opacity-50 text-gray-700 shadow-sm hover:shadow-md"
          >
            <RefreshCw size={18} />
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
          <button
            onClick={handleSubmit}
            disabled={isLoading}
            className="flex-1 flex items-center justify-center gap-2 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-semibold disabled:opacity-50 shadow-md hover:shadow-lg"
          >
            {isLoading ? (
              <>
                <RefreshCw size={18} className="animate-spin" />
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              <>
                <Send size={18} />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};