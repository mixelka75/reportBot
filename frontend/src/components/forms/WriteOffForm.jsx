import React, { useState, useEffect, useCallback } from 'react';
import { MapPin, Send, RefreshCw, Home, Plus } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ValidationAlert } from '../common/ValidationAlert';
import { useAutoSave } from '../../hooks/useAutoSave';
import { useFormData } from '../../hooks/useFormData';
import { getTodayDate, getYesterdayDate } from '../../utils/dateUtils';

export const WriteOffForm = ({
  isLoading,
  setIsLoading,
  validationErrors,
  setValidationErrors,
  showValidationErrors,
  showNotification,
  clearCurrentDraft,
  currentDraftId,
  loadDraft,
  saveDraft,
  goToMenu,
  locations,
  apiService
}) => {
  const [formData, setFormData] = useState({
    location: '',
    date: '',
    writeoffs: Array(5).fill({ name: '', weight: '', unit: '', reason: '' }),
    transfers: Array(5).fill({ name: '', weight: '', unit: '', reason: '' })
  });

  const { handleNumberInput } = useFormData(validationErrors, setValidationErrors);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentDraftId) {
      const draftData = loadDraft(currentDraftId);
      if (draftData) {
        setFormData(draftData);
      }
    }
  }, [currentDraftId, loadDraft]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const autoSaveFunction = useCallback(async (data) => {
    const hasWriteoffs = data.writeoffs.some(item => item.name || item.weight || item.unit || item.reason);
    const hasTransfers = data.transfers.some(item => item.name || item.weight || item.unit || item.reason);

    if (data.location || data.date || hasWriteoffs || hasTransfers) {
      await saveDraft('writeoff', data);
    }
  }, [saveDraft]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 300–º—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–∞
  useAutoSave(formData, autoSaveFunction, 300);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [validationErrors, setValidationErrors]);

  const handleArrayChange = useCallback((category, index, field, value) => {
    setFormData(prev => {
      const newArray = [...prev[category]];
      newArray[index] = { ...newArray[index], [field]: value };
      return { ...prev, [category]: newArray };
    });
  }, []);

  const addArrayItem = useCallback((category) => {
    setFormData(prev => ({
      ...prev,
      [category]: [...prev[category], { name: '', weight: '', unit: '', reason: '' }]
    }));
  }, []);

  const handleSubmit = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};

    if (!formData.location) errors.location = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é';
    if (!formData.date) errors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const hasWriteoffs = formData.writeoffs.some(item => item.name && item.weight && item.unit && item.reason);
    const hasTransfers = formData.transfers.some(item => item.name && item.weight && item.unit && item.reason);

    if (!hasWriteoffs && !hasTransfers) {
      errors.items = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)';
    }

    if (Object.keys(errors).length > 0) {
      showValidationErrors(errors);
      return;
    }

    setIsLoading(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
      const apiFormData = new FormData();

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      apiFormData.append('location', formData.location);
      apiFormData.append('report_date', formData.date);
      apiFormData.append('date', new Date().toISOString());

      // –°–ø–∏—Å–∞–Ω–∏—è
      const writeoffItems = formData.writeoffs
        .filter(item => item.name && item.weight && item.unit && item.reason)
        .map(item => ({
          name: item.name,
          weight: parseFloat(item.weight),
          unit: item.unit,
          reason: item.reason
        }));

      if (writeoffItems.length > 0) {
        apiFormData.append('writeoffs_json', JSON.stringify(writeoffItems));
      }

      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      const transferItems = formData.transfers
        .filter(item => item.name && item.weight && item.unit && item.reason)
        .map(item => ({
          name: item.name,
          weight: parseFloat(item.weight),
          unit: item.unit,
          reason: item.reason
        }));

      if (transferItems.length > 0) {
        apiFormData.append('transfers_json', JSON.stringify(transferItems));
      }

      const result = await apiService.createWriteOffReport(apiFormData);
      clearCurrentDraft(); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      showNotification('success', '–ê–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '–ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  }, [formData, apiService, showNotification, showValidationErrors, clearCurrentDraft, setIsLoading]);

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
      <div className="max-w-md mx-auto">
        <div className="flex items-center gap-4 mb-6">
          <button
            onClick={goToMenu}
            className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
            disabled={isLoading}
          >
            <Home size={20} className="text-gray-600" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-red-600">üìã –ê–∫—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</h1>
            {currentDraftId && (
              <p className="text-sm text-red-600">‚úì –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
            )}
          </div>
        </div>

        {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
        <ValidationAlert errors={validationErrors} />

        {/* Location */}
        <div className="mb-4">
          <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
            <MapPin size={16} className="text-red-500" />
            üìç –õ–æ–∫–∞—Ü–∏—è:
          </label>
          <div className="space-y-2">
            {locations.map(loc => (
              <button
                key={loc}
                onClick={() => handleInputChange('location', loc)}
                disabled={isLoading}
                className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                  formData.location === loc 
                    ? 'bg-red-500 border-red-500 text-white shadow-md' 
                    : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                } ${validationErrors.location ? 'border-red-400 bg-red-50' : ''}`}
              >
                {loc}
              </button>
            ))}
          </div>
        </div>

        {/* Date */}
        <div className="mb-6">
          <label className="text-sm font-medium block mb-2 text-gray-700">üìÜ –í—ã–±–æ—Ä –¥–∞—Ç—ã</label>
          <p className="text-xs text-amber-600 mb-3">–ï—Å–ª–∏ –≤—ã –Ω–æ—á–Ω–æ–π –∫–∞—Å—Å–∏—Ä —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É</p>

          {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ */}
          <div className="flex gap-2 mb-3">
            <button
              type="button"
              onClick={() => handleInputChange('date', getTodayDate())}
              disabled={isLoading}
              className={`flex-1 p-2 rounded-lg border transition-colors disabled:opacity-50 text-sm ${
                formData.date === getTodayDate()
                  ? 'bg-red-500 border-red-500 text-white shadow-md'
                  : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
              }`}
            >
              üìÖ –°–µ–≥–æ–¥–Ω—è
            </button>
            <button
              type="button"
              onClick={() => handleInputChange('date', getYesterdayDate())}
              disabled={isLoading}
              className={`flex-1 p-2 rounded-lg border transition-colors disabled:opacity-50 text-sm ${
                formData.date === getYesterdayDate()
                  ? 'bg-red-500 border-red-500 text-white shadow-md'
                  : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
              }`}
            >
              üìÖ –í—á–µ—Ä–∞
            </button>
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã */}
          <input
            type="text"
            value={formData.date ? new Date(formData.date + 'T00:00:00').toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}
            readOnly
            className={`w-full p-3 border rounded-lg text-center transition-colors ${
              validationErrors.date 
                ? 'border-red-400 bg-red-50 text-red-700' 
                : 'bg-gray-100 border-gray-300 text-gray-700'
            }`}
          />
          {!formData.date && !validationErrors.date && (
            <p className="text-xs text-red-500 mt-1">üìÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã</p>
          )}
          {validationErrors.date && (
            <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.date}</p>
          )}
        </div>

        {/* Writeoffs Section */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-red-600 mb-3">üóëÔ∏è –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</h3>
          <p className="text-xs text-gray-600 mb-3">–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ—Ä—Ç–∏–ª–∏—Å—å –∏ –ø–æ–¥–ª–µ–∂–∞—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏</p>
          <div className="space-y-2">
            {formData.writeoffs.map((item, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 p-3 bg-white rounded-lg border border-gray-300 shadow-sm">
                <MemoizedInput
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                  value={item.name}
                  onChange={(e) => handleArrayChange('writeoffs', index, 'name', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50 transition-colors text-sm"
                  name={`writeoff-name-${index}`}
                  id={`writeoff-name-${index}`}
                />
                <div className="flex gap-1">
                  <MemoizedInput
                    type="text"
                    placeholder="–í–µ—Å"
                    value={item.weight}
                    onChange={(e) => handleNumberInput(e, (value) =>
                      handleArrayChange('writeoffs', index, 'weight', value)
                    )}
                    disabled={isLoading}
                    className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50 transition-colors text-sm flex-1"
                    name={`writeoff-weight-${index}`}
                    id={`writeoff-weight-${index}`}
                  />
                  <MemoizedInput
                    type="text"
                    placeholder="–µ–¥."
                    value={item.unit}
                    onChange={(e) => handleArrayChange('writeoffs', index, 'unit', e.target.value)}
                    disabled={isLoading}
                    className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50 transition-colors text-sm w-12"
                    name={`writeoff-unit-${index}`}
                    id={`writeoff-unit-${index}`}
                  />
                </div>
                <MemoizedInput
                  type="text"
                  placeholder="–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Ä—á–∏"
                  value={item.reason}
                  onChange={(e) => handleArrayChange('writeoffs', index, 'reason', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none disabled:opacity-50 transition-colors text-sm col-span-2"
                  name={`writeoff-reason-${index}`}
                  id={`writeoff-reason-${index}`}
                />
              </div>
            ))}
          </div>
          <button
            onClick={() => addArrayItem('writeoffs')}
            disabled={isLoading}
            className="w-full p-2 mt-3 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50 shadow-md hover:shadow-lg"
          >
            <Plus size={16} />
            –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ
          </button>
        </div>

        {/* Transfers Section */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-blue-600 mb-3">üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</h3>
          <p className="text-xs text-gray-600 mb-3">–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–æ—á–∫–∏</p>
          <div className="space-y-2">
            {formData.transfers.map((item, index) => (
              <div key={index} className="grid grid-cols-2 gap-2 p-3 bg-white rounded-lg border border-gray-300 shadow-sm">
                <MemoizedInput
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                  value={item.name}
                  onChange={(e) => handleArrayChange('transfers', index, 'name', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors text-sm"
                  name={`transfer-name-${index}`}
                  id={`transfer-name-${index}`}
                />
                <div className="flex gap-1">
                  <MemoizedInput
                    type="text"
                    placeholder="–í–µ—Å"
                    value={item.weight}
                    onChange={(e) => handleNumberInput(e, (value) =>
                      handleArrayChange('transfers', index, 'weight', value)
                    )}
                    disabled={isLoading}
                    className="p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors text-sm flex-1"
                    name={`transfer-weight-${index}`}
                    id={`transfer-weight-${index}`}
                  />
                  <MemoizedInput
                    type="text"
                    placeholder="–µ–¥."
                    value={item.unit}
                    onChange={(e) => handleArrayChange('transfers', index, 'unit', e.target.value)}
                    disabled={isLoading}
                    className="p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors text-sm w-12"
                    name={`transfer-unit-${index}`}
                    id={`transfer-unit-${index}`}
                  />
                </div>
                <MemoizedInput
                  type="text"
                  placeholder="–ö—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è / –ø—Ä–∏—á–∏–Ω–∞"
                  value={item.reason}
                  onChange={(e) => handleArrayChange('transfers', index, 'reason', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none disabled:opacity-50 transition-colors text-sm col-span-2"
                  name={`transfer-reason-${index}`}
                  id={`transfer-reason-${index}`}
                />
              </div>
            ))}
          </div>
          <button
            onClick={() => addArrayItem('transfers')}
            disabled={isLoading}
            className="w-full p-2 mt-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50 shadow-md hover:shadow-lg"
          >
            <Plus size={16} />
            –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
          </button>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3 mb-6">
          <button
            onClick={() => {
              window.location.reload();
            }}
            disabled={isLoading}
            className="flex-1 flex items-center justify-center gap-2 p-3 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-colors disabled:opacity-50 text-gray-700 shadow-sm hover:shadow-md"
          >
            <RefreshCw size={18} />
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
          <button
            onClick={handleSubmit}
            disabled={isLoading}
            className="flex-1 flex items-center justify-center gap-2 p-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-semibold disabled:opacity-50 shadow-md hover:shadow-lg"
          >
            {isLoading ? (
              <>
                <RefreshCw size={18} className="animate-spin" />
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              <>
                <Send size={18} />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};