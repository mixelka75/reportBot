import React, { useState, useEffect, useCallback } from 'react';
import { MapPin, Send, RefreshCw, Home, Plus, Clock, User } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ValidationAlert } from '../common/ValidationAlert';
import { ConfirmationModal } from '../common/ConfirmationModal';
import { useAutoSave } from '../../hooks/useAutoSave';
import { useFormData } from '../../hooks/useFormData';
import { getCurrentMSKTime } from '../../utils/dateUtils';

export const WriteOffForm = ({
  isLoading,
  setIsLoading,
  validationErrors,
  setValidationErrors,
  showValidationErrors,
  showNotification,
  clearCurrentDraft,
  currentDraftId,
  loadDraft,
  saveDraft,
  goToMenu,
  locations,
  apiService
}) => {
  const [formData, setFormData] = useState({
    location: '',
    shift: '',
    cashierName: '',
    writeoff_or_transfer: '–°–ø–∏—Å–∞–Ω–∏—è',
    date: getCurrentMSKTime(),
    writeOffs: Array(4).fill({ name: '', weight: '', unit: '', reason: '' })
  });

  const [showClearModal, setShowClearModal] = useState(false);
  const { handleNumberInput } = useFormData(validationErrors, setValidationErrors);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentDraftId) {
      const draftData = loadDraft(currentDraftId);
      if (draftData) {
        setFormData(draftData);
      }
    }
  }, [currentDraftId, loadDraft]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const autoSaveFunction = useCallback(async (data) => {
    const hasWriteOffs = data.writeOffs.some(item => item.name || item.weight || item.unit || item.reason);

    if (data.location || hasWriteOffs) {
      await saveDraft('writeoff', data);
    }
  }, [saveDraft]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 300–º—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–∞
  useAutoSave(formData, autoSaveFunction, 300);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [validationErrors, setValidationErrors]);

  const handleArrayChange = useCallback((arrayName, index, field, value) => {
    setFormData(prev => {
      const newArray = [...prev[arrayName]];
      newArray[index] = { ...newArray[index], [field]: value };
      return { ...prev, [arrayName]: newArray };
    });
  }, []);

  const addArrayItem = useCallback((arrayName) => {
  setFormData(prev => ({
    ...prev,
    [arrayName]: [...prev[arrayName], { name: '', weight: '', unit: '', reason: '' }]
  }));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã
  const handleClearForm = useCallback(() => {
    if (currentDraftId) {
      clearCurrentDraft();
    }
    setValidationErrors({});
    window.location.reload();
  }, [currentDraftId, clearCurrentDraft, setValidationErrors]);

  const handleSubmit = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};

    if (!formData.location) errors.location = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é';
    if (!formData.shift) errors.shift = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É';
    if (!formData.cashierName.trim()) errors.cashierName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Å—Å–∏—Ä–∞';
    if (!formData.date) errors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    const hasWriteOffs = formData.writeOffs.some(item => item.name && item.weight && item.unit && item.reason);

    if (!hasWriteOffs) {
      errors.items = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ + –≤–µ—Å + –µ–¥–∏–Ω–∏—Ü–∞ + –ø—Ä–∏—á–∏–Ω–∞)';
    }

    if (Object.keys(errors).length > 0) {
      showValidationErrors(errors);
      return;
    }

    setIsLoading(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
      const apiFormData = new FormData();

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      apiFormData.append('location', formData.location);
      apiFormData.append('shift_type', formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night');
      apiFormData.append('cashier_name', formData.cashierName);
      apiFormData.append('writeoff_or_transfer', formData.writeoff_or_transfer);

      // –°–ø–∏—Å–∞–Ω–∏—è
      const writeoffs = formData.writeOffs
        .filter(item => item.name && item.weight && item.unit && item.reason)
        .map(item => ({
          name: item.name,
          unit: item.unit,
          weight: parseFloat(item.weight),
          reason: item.reason
        }));

      if (writeoffs.length > 0) {
        apiFormData.append('writeoffs_json', JSON.stringify(writeoffs));
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
      const transfers = [];
      apiFormData.append('transfers_json', JSON.stringify(transfers));

      const result = await apiService.createWriteOffReport(apiFormData);
      clearCurrentDraft();
      showNotification('success', '–ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '–ê–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  }, [formData, apiService, showNotification, showValidationErrors, clearCurrentDraft, setIsLoading]);

  return (
    <>
      <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={goToMenu}
              className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
              disabled={isLoading}
            >
              <Home size={20} className="text-gray-600" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-red-600">üóëÔ∏è –ê–∫—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è</h1>
              {currentDraftId && (
                <p className="text-sm text-red-600">‚úì –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
              )}
            </div>
          </div>

          {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          <ValidationAlert errors={validationErrors} />

          {/* Location */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <MapPin size={16} className="text-red-500" />
              üìç –õ–æ–∫–∞—Ü–∏—è:
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => handleInputChange('location', loc)}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.location === loc 
                      ? 'bg-red-500 border-red-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.location ? 'border-red-400 bg-red-50' : ''}`}
                >
                  {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Shift Selection */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <Clock size={16} className="text-red-500" />
              üïê –°–º–µ–Ω–∞:
            </label>
            <div className="grid grid-cols-2 gap-2">
              {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
                <button
                  key={shift}
                  onClick={() => handleInputChange('shift', shift)}
                  disabled={isLoading}
                  className={`p-3 text-center rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.shift === shift 
                      ? 'bg-red-500 border-red-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.shift ? 'border-red-400 bg-red-50' : ''}`}
                >
                  {shift}
                </button>
              ))}
            </div>
            {validationErrors.shift && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.shift}</p>
            )}
          </div>

          {/* Cashier Name */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <User size={16} className="text-red-500" />
              üë§ –ò–º—è –∫–∞—Å—Å–∏—Ä–∞:
            </label>
            <MemoizedInput
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∞—Å—Å–∏—Ä–∞"
              value={formData.cashierName}
              onChange={(e) => handleInputChange('cashierName', e.target.value)}
              disabled={isLoading}
              className={`w-full p-3 border rounded-lg transition-colors disabled:opacity-50 ${
                validationErrors.cashierName 
                  ? 'border-red-400 bg-red-50 text-red-700' 
                  : 'bg-white border-gray-300 focus:border-red-500 focus:outline-none text-gray-700'
              }`}
              name="cashier-name"
              id="cashier-name"
            />
            {validationErrors.cashierName && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.cashierName}</p>
            )}
          </div>

          {/* Date & Time */}
          <div className="mb-4">
            <label className="text-sm font-medium block mb-2 text-gray-700">üìÖ –î–∞—Ç–∞ (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ú–°–ö)</label>
            <input
              type="text"
              value={formData.date}
              readOnly
              className="w-full p-3 bg-gray-100 border border-gray-300 rounded-lg text-gray-700"
            />
          </div>

          {/* Write-offs Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-red-600 mb-3">üóëÔ∏è –°–ø–∏—Å–∞–Ω–∏—è</h3>
            <p className="text-sm text-gray-600 mb-3">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –∫–≥/—à—Ç - –ø—Ä–∏—á–∏–Ω–∞</p>
            {formData.writeOffs.map((item, index) => (
              <div key={index} className="grid grid-cols-4 gap-1 mb-2">
                <MemoizedInput
                  type="text"
                  placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                  value={item.name}
                  onChange={(e) => handleArrayChange('writeOffs', index, 'name', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none text-xs disabled:opacity-50 transition-colors"
                  name={`writeoff-name-${index}`}
                  id={`writeoff-name-${index}`}
                />
                <MemoizedInput
                  type="text"
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  value={item.weight}
                  onChange={(e) => handleNumberInput(e, (value) =>
                    handleArrayChange('writeOffs', index, 'weight', value)
                  )}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none text-xs disabled:opacity-50 transition-colors"
                  name={`writeoff-weight-${index}`}
                  id={`writeoff-weight-${index}`}
                />
                <MemoizedInput
                  type="text"
                  placeholder="–∫–≥/—à—Ç"
                  value={item.unit}
                  onChange={(e) => handleArrayChange('writeOffs', index, 'unit', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none text-xs disabled:opacity-50 transition-colors"
                  name={`writeoff-unit-${index}`}
                  id={`writeoff-unit-${index}`}
                />
                <MemoizedInput
                  type="text"
                  placeholder="–ü—Ä–∏—á–∏–Ω–∞"
                  value={item.reason}
                  onChange={(e) => handleArrayChange('writeOffs', index, 'reason', e.target.value)}
                  disabled={isLoading}
                  className="p-2 bg-white border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none text-xs disabled:opacity-50 transition-colors"
                  name={`writeoff-reason-${index}`}
                  id={`writeoff-reason-${index}`}
                />
              </div>
            ))}
            <button
              onClick={() => addArrayItem('writeOffs')}
              disabled={isLoading}
              className="w-full p-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50 shadow-md hover:shadow-lg"
            >
              <Plus size={16} />
              –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ
            </button>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => setShowClearModal(true)}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-colors disabled:opacity-50 text-gray-700 shadow-sm hover:shadow-md"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-semibold disabled:opacity-50 shadow-md hover:shadow-lg"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ */}
      <ConfirmationModal
        isOpen={showClearModal}
        onClose={() => setShowClearModal(false)}
        onConfirm={handleClearForm}
        title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
        confirmText="–û—á–∏—Å—Ç–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="warning"
      />
    </>
  );
};