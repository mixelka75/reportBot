import React, { useState, useCallback, useRef } from 'react';
import { Home, Plus, Edit3, Trash2, Search, Package, Save, X, AlertCircle } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ConfirmationModal } from '../common/ConfirmationModal';
import useInventoryItems from '../../hooks/useInventoryItems';

export const InventoryManagement = ({ goToMenu }) => {
  const {
    items,
    loading,
    error,
    createItem,
    updateItem,
    deleteItem,
    fetchItems
  } = useInventoryItems();

  const [showForm, setShowForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterActive, setFilterActive] = useState('all');
  const [formData, setFormData] = useState({
    name: '',
    unit: '—à—Ç',
    is_active: true
  });
  const [formErrors, setFormErrors] = useState({});
  const [submitLoading, setSubmitLoading] = useState(false);

  // Ref –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const formRef = useRef(null);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredItems = items.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesActive = filterActive === 'all' ||
                         (filterActive === 'active' && item.is_active) ||
                         (filterActive === 'inactive' && !item.is_active);

    return matchesSearch && matchesActive;
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
  const scrollToForm = useCallback(() => {
    if (formRef.current) {
      formRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
        inline: 'nearest'
      });
    }
  }, []);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = useCallback(() => {
    setFormData({
      name: '',
      unit: '—à—Ç',
      is_active: true
    });
    setFormErrors({});
    setEditingItem(null);
    setShowForm(false);
  }, []);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = useCallback(() => {
    const errors = {};

    if (!formData.name.trim()) {
      errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.unit.trim()) {
      errors.unit = '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  }, [formData]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = useCallback(async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setSubmitLoading(true);

    try {
      const submitData = {
        ...formData,
        name: formData.name.trim(),
        unit: formData.unit.trim()
      };

      if (editingItem) {
        await updateItem(editingItem.id, submitData);
      } else {
        await createItem(submitData);
      }

      resetForm();
    } catch (error) {
      setFormErrors({ submit: error.message });
    } finally {
      setSubmitLoading(false);
    }
  }, [formData, editingItem, validateForm, createItem, updateItem, resetForm]);

  // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∫ —Ñ–æ—Ä–º–µ
  const handleEdit = useCallback((item) => {
    setEditingItem(item);
    setFormData({
      name: item.name,
      unit: item.unit,
      is_active: item.is_active
    });
    setFormErrors({});
    setShowForm(true);

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
    setTimeout(() => {
      scrollToForm();
    }, 100);
  }, [scrollToForm]);

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
  const handleAddNew = useCallback(() => {
    setShowForm(true);
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
    setTimeout(() => {
      scrollToForm();
    }, 100);
  }, [scrollToForm]);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteClick = useCallback((item) => {
    setItemToDelete(item);
    setShowDeleteModal(true);
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  const handleDelete = useCallback(async () => {
    if (!itemToDelete) return;

    try {
      await deleteItem(itemToDelete.id);
      setShowDeleteModal(false);
      setItemToDelete(null);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
  }, [itemToDelete, deleteItem]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
  const updateFormField = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (formErrors[field]) {
      setFormErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [formErrors]);

  return (
    <>
      <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
        <div className="max-w-4xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={goToMenu}
              className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
            >
              <Home size={20} className="text-gray-600" />
            </button>
            <div className="flex-1">
              <h1 className="text-2xl font-bold text-blue-600">üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h1>
              <p className="text-sm text-gray-600">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏</p>
            </div>
            <button
              onClick={handleAddNew}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md"
            >
              <Plus size={18} />
              –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
            </button>
          </div>

          {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center gap-2">
                <AlertCircle size={16} className="text-red-500" />
                <span className="text-red-700">–û—à–∏–±–∫–∞: {error}</span>
              </div>
            </div>
          )}

          {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
          <div className="bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="relative">
                <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                />
              </div>

              <select
                value={filterActive}
                onChange={(e) => setFilterActive(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
              >
                <option value="all">–í—Å–µ —Ç–æ–≤–∞—Ä—ã</option>
                <option value="active">–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="inactive">–¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
              </select>

              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Package size={16} />
                <span>–ù–∞–π–¥–µ–Ω–æ: {filteredItems.length}</span>
              </div>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          {showForm && (
            <div
              ref={formRef}
              className="bg-white border border-gray-200 rounded-lg p-6 mb-6 shadow-sm scroll-mt-4"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-800">
                  {editingItem ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä: ${editingItem.name}` : '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä'}
                </h3>
                <button
                  onClick={resetForm}
                  className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              {formErrors.submit && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-center gap-2">
                    <AlertCircle size={16} className="text-red-500" />
                    <span className="text-red-700">{formErrors.submit}</span>
                  </div>
                </div>
              )}

              <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *
                  </label>
                  <MemoizedInput
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–ª–∞ 0.5–ª"
                    value={formData.name}
                    onChange={(e) => updateFormField('name', e.target.value)}
                    disabled={submitLoading}
                    className={`w-full p-3 border rounded-lg focus:outline-none transition-colors ${
                      formErrors.name 
                        ? 'border-red-400 bg-red-50' 
                        : 'border-gray-300 focus:border-blue-500'
                    }`}
                    hasError={!!formErrors.name}
                    autoFocus={showForm} // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ä–º—ã
                  />
                  {formErrors.name && (
                    <p className="text-xs text-red-600 mt-1">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *
                  </label>
                  <MemoizedInput
                    type="text"
                    placeholder="—à—Ç, –∫–≥, –ª, —É–ø–∞–∫"
                    value={formData.unit}
                    onChange={(e) => updateFormField('unit', e.target.value)}
                    disabled={submitLoading}
                    className={`w-full p-3 border rounded-lg focus:outline-none transition-colors ${
                      formErrors.unit 
                        ? 'border-red-400 bg-red-50' 
                        : 'border-gray-300 focus:border-blue-500'
                    }`}
                    hasError={!!formErrors.unit}
                  />
                  {formErrors.unit && (
                    <p className="text-xs text-red-600 mt-1">{formErrors.unit}</p>
                  )}
                </div>

                <div className="md:col-span-2">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={formData.is_active}
                      onChange={(e) => updateFormField('is_active', e.target.checked)}
                      disabled={submitLoading}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-gray-700">
                      –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä (–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏)
                    </span>
                  </label>
                </div>

                <div className="md:col-span-2 flex gap-3 pt-4">
                  <button
                    type="submit"
                    disabled={submitLoading}
                    className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 font-medium"
                  >
                    <Save size={18} />
                    {submitLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (editingItem ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
                  </button>
                  <button
                    type="button"
                    onClick={resetForm}
                    disabled={submitLoading}
                    className="px-6 py-3 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors disabled:opacity-50 font-medium"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
          <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
            <div className="p-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-800">–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h3>
            </div>

            {loading ? (
              <div className="p-8 text-center">
                <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
                <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
              </div>
            ) : filteredItems.length === 0 ? (
              <div className="p-8 text-center">
                <Package size={48} className="mx-auto mb-4 text-gray-400" />
                <p className="text-gray-600">
                  {searchTerm || filterActive !== 'all'
                    ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º'
                    : '–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!'
                  }
                </p>
              </div>
            ) : (
              <div className="divide-y divide-gray-200">
                {filteredItems.map(item => (
                  <div key={item.id} className="p-4 hover:bg-gray-50 transition-colors">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h4 className="font-medium text-gray-900">{item.name}</h4>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            item.is_active 
                              ? 'bg-green-100 text-green-700' 
                              : 'bg-red-100 text-red-700'
                          }`}>
                            {item.is_active ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                          </span>
                          {editingItem && editingItem.id === item.id && (
                            <span className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-700">
                              –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                            </span>
                          )}
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm text-gray-600">
                          <div>
                            <span className="font-medium">–ï–¥–∏–Ω–∏—Ü–∞:</span>
                            <br />
                            {item.unit}
                          </div>
                          <div>
                            <span className="font-medium">ID:</span>
                            <br />
                            {item.id}
                          </div>
                          <div>
                            <span className="font-medium">–°–æ–∑–¥–∞–Ω:</span>
                            <br />
                            {new Date(item.created_at).toLocaleDateString('ru-RU')}
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2 ml-4">
                        <button
                          onClick={() => handleEdit(item)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          <Edit3 size={16} />
                        </button>
                        <button
                          onClick={() => handleDeleteClick(item)}
                          className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <ConfirmationModal
        isOpen={showDeleteModal}
        onClose={() => {
          setShowDeleteModal(false);
          setItemToDelete(null);
        }}
        onConfirm={handleDelete}
        title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
        message={`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${itemToDelete?.name}"? –¢–æ–≤–∞—Ä —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.`}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="danger"
      />
    </>
  );
};