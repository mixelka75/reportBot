const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ API
const handleResponse = async (response, operation = '–æ–ø–µ—Ä–∞—Ü–∏—è') => {
  console.log(`üì° API Response [${operation}]:`, {
    status: response.status,
    statusText: response.statusText,
    url: response.url,
    headers: Object.fromEntries(response.headers.entries())
  });

  if (!response.ok) {
    let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.status}`;

    try {
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const errorData = await response.json();
        errorMessage = errorData.detail || errorData.message || errorMessage;
      } else {
        const textData = await response.text();
        console.error(`‚ùå Non-JSON response [${operation}]:`, textData);
        errorMessage = `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`;
      }
    } catch (parseError) {
      console.error(`‚ùå Error parsing response [${operation}]:`, parseError);
      errorMessage = `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`;
    }

    throw new Error(errorMessage);
  }

  try {
    const data = await response.json();
    console.log(`‚úÖ API Success [${operation}]:`, data);
    return data;
  } catch (parseError) {
    console.error(`‚ùå JSON Parse Error [${operation}]:`, parseError);
    throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç');
  }
};

export const apiService = {
  async createShiftReport(formData) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å–º–µ–Ω—ã...');
    try {
      const response = await fetch(`${API_BASE_URL}/shift-reports/create`, {
        method: 'POST',
        body: formData
      });
      return await handleResponse(response, 'createShiftReport');
    } catch (error) {
      console.error('‚ùå createShiftReport error:', error);
      throw error;
    }
  },

  async createInventoryReport(formData) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏...');
    try {
      const response = await fetch(`${API_BASE_URL}/daily_inventory/create`, {
        method: 'POST',
        body: formData
      });
      return await handleResponse(response, 'createInventoryReport');
    } catch (error) {
      console.error('‚ùå createInventoryReport error:', error);
      throw error;
    }
  },

  // –ù–û–í–û–ï: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ v2
  async createInventoryReportV2(data) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ v2...', data);
    try {
      const response = await fetch(`${API_BASE_URL}/daily-inventory-v2/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      return await handleResponse(response, 'createInventoryReportV2');
    } catch (error) {
      console.error('‚ùå createInventoryReportV2 error:', error);
      throw error;
    }
  },

  async createReceivingReport(formData) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø—Ä–∏–µ–º–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
    try {
      const response = await fetch(`${API_BASE_URL}/report-on-goods/create`, {
        method: 'POST',
        body: formData
      });
      return await handleResponse(response, 'createReceivingReport');
    } catch (error) {
      console.error('‚ùå createReceivingReport error:', error);
      throw error;
    }
  },

  async createWriteOffReport(formData) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');
    try {
      const response = await fetch(`${API_BASE_URL}/writeoff-transfer/create`, {
        method: 'POST',
        body: formData
      });
      return await handleResponse(response, 'createWriteOffReport');
    } catch (error) {
      console.error('‚ùå createWriteOffReport error:', error);
      throw error;
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  async sendAdditionalPhotos(location, photos) {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...');

    if (!photos || photos.length === 0) {
      throw new Error('–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }

    try {
      const formData = new FormData();
      formData.append('location', location);

      photos.forEach((photo, index) => {
        formData.append('photos', photo);
      });

      const response = await fetch(`${API_BASE_URL}/report-on-goods/send-photo`, {
        method: 'POST',
        body: formData
      });
      return await handleResponse(response, 'sendAdditionalPhotos');
    } catch (error) {
      console.error('‚ùå sendAdditionalPhotos error:', error);
      throw error;
    }
  },

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê–ú–ò =====

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  async getInventoryItems(filters = {}) {
    console.log('üöÄ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...', filters);
    try {
      const params = new URLSearchParams();

      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== '') {
          params.append(key, value);
        }
      });

      const url = `${API_BASE_URL}/inventory-management/items?${params}`;
      console.log('üì° Request URL:', url);

      const response = await fetch(url);
      return await handleResponse(response, 'getInventoryItems');
    } catch (error) {
      console.error('‚ùå getInventoryItems error:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
  async getInventoryItem(itemId) {
    console.log(`üöÄ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä ${itemId}...`);
    try {
      const response = await fetch(`${API_BASE_URL}/inventory-management/items/${itemId}`);
      return await handleResponse(response, 'getInventoryItem');
    } catch (error) {
      console.error('‚ùå getInventoryItem error:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  async createInventoryItem(itemData) {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä...', itemData);
    try {
      const response = await fetch(`${API_BASE_URL}/inventory-management/items`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(itemData)
      });
      return await handleResponse(response, 'createInventoryItem');
    } catch (error) {
      console.error('‚ùå createInventoryItem error:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  async updateInventoryItem(itemId, updateData) {
    console.log(`üöÄ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä ${itemId}...`, updateData);
    try {
      const response = await fetch(`${API_BASE_URL}/inventory-management/items/${itemId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData)
      });
      return await handleResponse(response, 'updateInventoryItem');
    } catch (error) {
      console.error('‚ùå updateInventoryItem error:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  async deleteInventoryItem(itemId) {
    console.log(`üöÄ –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä ${itemId}...`);
    try {
      const response = await fetch(`${API_BASE_URL}/inventory-management/items/${itemId}`, {
        method: 'DELETE'
      });
      return await handleResponse(response, 'deleteInventoryItem');
    } catch (error) {
      console.error('‚ùå deleteInventoryItem error:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async getInventoryCategories() {
    console.log('üöÄ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
    try {
      const response = await fetch(`${API_BASE_URL}/inventory-management/categories`);
      return await handleResponse(response, 'getInventoryCategories');
    } catch (error) {
      console.error('‚ùå getInventoryCategories error:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ v2
  async getDetailedInventoryV2(inventoryId) {
    console.log(`üöÄ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é ${inventoryId}...`);
    try {
      const response = await fetch(`${API_BASE_URL}/daily-inventory-v2/${inventoryId}/detailed`);
      return await handleResponse(response, 'getDetailedInventoryV2');
    } catch (error) {
      console.error('‚ùå getDetailedInventoryV2 error:', error);
      throw error;
    }
  }
};